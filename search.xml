<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS linux(AMI) 搭建VPN</title>
    <url>/2016/11/02/AWS%20linux(AMI)%20%E6%90%AD%E5%BB%BAVPN/</url>
    <content><![CDATA[<p>AWS提供一年的免费试用($2.00)，试着在amazon linux(AMI) 上搭建vpn，简要记录一下搭建过程。</p>
<span id="more"></span>

<p>安装过程如下：</p>
<h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><ol>
<li><p>给pem权限<br> <code>chmod 400 data_korea.pem</code></p>
</li>
<li><p>登录ec2<br> <code>ssh -i &quot;data_korea.pem&quot; ec2-user@ec2-52-78-70-0.ap-northeast-2.compute.amazonaws.com</code></p>
</li>
<li><p>修改默认用户和root密码<br> <code>sudo passwd ec2-user</code><br> <code>suod paddwd root</code></p>
</li>
<li><p>切换root用户，修改文件</p>
<p> <code>su root</code><br> <code>vim /etc/ssh/sshd_config</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br><span class="line">PubkeyAuthentication no</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
</li>
<li><p>reboot或者重启ssh  <code>/etc/init.d/sshd restart</code></p>
</li>
</ol>
<h3 id="vpn安装"><a href="#vpn安装" class="headerlink" title="vpn安装"></a>vpn安装</h3><ol>
<li><p>安装ppp<br> <code>yum install ppp</code></p>
</li>
<li><p>下载并安装pptpd</p>
<p> <code>wget http://poptop.sourceforge.net/yum/stable/packages/ppp-2.4.5-33.0.fc21.x86_64.rpm</code><br> <code>wget http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm</code><br> <code>rpm -Uhv pptpd*.rpm</code></p>
</li>
<li><p>添加DNS服务器 (可选)</p>
<p> 打开vim &#x2F;etc&#x2F;ppp&#x2F;options.pptpd 文件并添加入如下内容：<br> <code>ms-dns 8.8.8.8</code><br> <code>ms-dns 8.8.4.4</code><br> <code>ms-dns 4.4.4.4</code><br> 以上2个是Google提供的免费DNS</p>
</li>
<li><p>添加 VPN 帐号<br> 在&#x2F;etc&#x2F;ppp&#x2F;chap-secrets文件中添加VPN用户，格式为“用户名 服务器 密码 IP地址”：<br> <code>vpnuser pptpd myVPN$99 *</code></p>
</li>
<li><p>打开IP转发(IP Forward)功能<br> 在 &#x2F;etc&#x2F;sysctl.conf 文件中修改：<br> <code>net.ipv4.ip_forward = 1</code></p>
</li>
<li><p>保存设置<br> <code>sysctl -p</code></p>
</li>
<li><p>在 IP Tables 中开启 IP 伪装(IP Masquerade)<br> <code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code><br> 如果你需要这个设置在重启之后依然有效，则需要把这一行添加到 &#x2F;etc&#x2F;rc.local 的末尾。</p>
</li>
<li><p>把 pptpd 设置成自动运行的<br> <code>chkconfig pptpd on</code></p>
</li>
<li><p>重启pptpd服务<br> <code>service pptpd restart</code></p>
</li>
<li><p>ec2控制台打开TCP的1723端口，这是pptpd的默认连接端口。</p>
</li>
</ol>
<p>References：<a href="https://leonax.net/p/3274/install-vpn-server-on-amazon-ec2/">https://leonax.net/p/3274/install-vpn-server-on-amazon-ec2/</a></p>
<h3 id="AMI-软件更新"><a href="#AMI-软件更新" class="headerlink" title="AMI 软件更新"></a>AMI 软件更新</h3><ol>
<li><p>jdk 更新</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep java   //查询系统jdk</span><br><span class="line">rpm -e --allmatches --nodeps java-1.6.0-openjdk-1.6.0.37-1.13.9.4.el5_11    //删除老版本</span><br><span class="line">yum -y list java*   (yum search jdk)                    //查询软件包内的jdk</span><br><span class="line">yum install java-1.8.0-openjdk.x86_64                   //安装新版本</span><br><span class="line">java -version                                           //验证</span><br></pre></td></tr></table></figure>
</li>
<li><p>jdk的安装路径加入到JAVA_HOME</p>
<p> <code>vi /etc/profile</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure>

<p> <code>. /etc/profile</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap，ConcurrentHashMap 全解析</title>
    <url>/2019/12/25/HashMap%EF%BC%8CConcurrentHashMap%20%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="HashMap从1-7到1-8"><a href="#HashMap从1-7到1-8" class="headerlink" title="HashMap从1.7到1.8"></a>HashMap从1.7到1.8</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://s2.ax1x.com/2019/10/04/uBrLAs.png" alt="hashmap.jpg"></p>
<span id="more"></span>

<h2 id="数据结构：引入了红黑树"><a href="#数据结构：引入了红黑树" class="headerlink" title="数据结构：引入了红黑树"></a>数据结构：引入了红黑树</h2><h3 id="主要介绍"><a href="#主要介绍" class="headerlink" title="主要介绍"></a>主要介绍</h3><p><img src="https://s2.ax1x.com/2019/10/04/uBsV9x.jpg" alt="红黑树.png"></p>
<p><a href="https://blog.csdn.net/v_july_v/article/details/6105630">红黑树</a></p>
<h3 id="存储流程"><a href="#存储流程" class="headerlink" title="存储流程"></a>存储流程</h3><p><img src="https://s2.ax1x.com/2019/10/04/uBrzcT.png" alt="main.jpg"></p>
<h3 id="数组元素-链表中的实现类"><a href="#数组元素-链表中的实现类" class="headerlink" title="数组元素&amp;链表中的实现类"></a>数组元素&amp;链表中的实现类</h3><ul>
<li><p><code>HashMap</code>中的数组元素&amp;链表节点采用<code>Node</code>类实现</p>
<blockquote>
<p>与1.7相比（Entry），仅仅只是换了名字	</p>
</blockquote>
</li>
<li><p>源码见 jdk1.8</p>
</li>
</ul>
<h3 id="红黑树节点实现类"><a href="#红黑树节点实现类" class="headerlink" title="红黑树节点实现类"></a>红黑树节点实现类</h3><ul>
<li><code>HashMap</code>中的红黑树节点采用<code>TreeNode</code>实现</li>
</ul>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="主要使用API和使用流程"><a href="#主要使用API和使用流程" class="headerlink" title="主要使用API和使用流程"></a>主要使用API和使用流程</h3><ul>
<li>基本与JDK1.7相同</li>
</ul>
<h2 id="基础知识：HashMap中的重要参数"><a href="#基础知识：HashMap中的重要参数" class="headerlink" title="基础知识：HashMap中的重要参数"></a>基础知识：HashMap中的重要参数</h2><h3 id="主要参数（与1-7相同）"><a href="#主要参数（与1-7相同）" class="headerlink" title="主要参数（与1.7相同）"></a>主要参数（与1.7相同）</h3><ul>
<li>容量（capacity）：必须是2的幂 &amp; &lt; 2^30</li>
<li>加载因子（load factor）：HashMap在其容量自动增加前可达到多满的一种尺度 </li>
<li>扩容阈值（threshold）：当哈希表的大小 ≥ 扩容阈值时，就会扩容哈希表（即扩充HashMap的容量） </li>
<li>其他<ul>
<li>Node  - 存储数据的Node类型 数组，长度 &#x3D; 2的幂；数组的每个元素 &#x3D; 1个单链表</li>
<li>size - HashMap的大小，即 HashMap中存储的键值对的数量</li>
</ul>
</li>
</ul>
<h3 id="其他参数（与红黑树相关）"><a href="#其他参数（与红黑树相关）" class="headerlink" title="其他参数（与红黑树相关）"></a>其他参数（与红黑树相关）</h3><ol>
<li><p>桶的树化阈值：即 链表转成红黑树的阈值，在存储数据时，当链表长度 &gt; 该值时，则将链表转换成红黑树</p>
<blockquote>
<p>static final int TREEIFY_THRESHOLD &#x3D; 8; </p>
</blockquote>
</li>
<li><p>桶的链表还原阈值：即 红黑树转为链表的阈值，当在扩容（resize（））时（此时HashMap的数据存储位置会重新计算），在重新计算存储位置后，当原有的红黑树内数量 &lt; 6时，则将 红黑树转换成链表</p>
<blockquote>
<p>static final int UNTREEIFY_THRESHOLD &#x3D; 6; 3. </p>
</blockquote>
</li>
<li><p>最小树形化容量阈值：即 当哈希表中的容量 &gt; 该值时，才允许树形化链表 （即 将链表 转换成红黑树） &#x2F;&#x2F; 否则，若桶内元素太多时，则直接扩容，而不是树形化 &#x2F;&#x2F; 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD </p>
<blockquote>
<p>static final int MIN_TREEIFY_CAPACITY &#x3D; 64;</p>
</blockquote>
</li>
</ol>
<h3 id="加载因子"><a href="#加载因子" class="headerlink" title="加载因子"></a>加载因子</h3><p><img src="https://s2.ax1x.com/2019/10/04/uBrv90.jpg" alt="factor.jpg"></p>
<h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table>
<thead>
<tr>
<th>版本</th>
<th>存储的数据结构</th>
<th>数组&amp;链表节点的实现类</th>
<th>红黑树的实现类</th>
<th>核心参数</th>
</tr>
</thead>
<tbody><tr>
<td>JDK8</td>
<td>数组+链表+红黑树</td>
<td>Node</td>
<td>TreeNode</td>
<td>主要参数相同，1.8增加了红黑树参数</td>
</tr>
<tr>
<td>JDK7</td>
<td>数组+链表</td>
<td>Entry</td>
<td>&#x2F;</td>
<td>1. 桶的树化阈值，即 链表转化为红黑树的阈值<br>2. 桶的链表还原阈值，即红黑树转为链表的阈值<br>3. 最小树形化容量阈值<br>- 当哈希表中的容量&gt;该值时，才允许树形化链表<br>- 否则当桶内元素太多时，则直接扩容，而不是树形化<br>- 为了避免扩容，树形化选择的冲突，这个值不能小于4*THEEIFY_THRESHOLD</td>
</tr>
</tbody></table>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ol>
<li><p>声明HashMap对象</p>
</li>
<li><p>添加数据，<code>put</code>操作</p>
<ul>
<li><p><code>hash</code>操作</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uBrXhq.png" alt="Hash.jpg"></p>
</li>
<li><p>1.8 hash过程</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uB6pTJ.png" alt="hash8.jpg"></p>
</li>
<li><p>计算过程</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uBrx3V.png" alt="com8.jpg"></p>
</li>
<li><p>为了解决 “哈希码与数组大小范围不匹配” 的问题，<code>HashMap</code>给出了解决方案：<strong>哈希码 与运算（&amp;） （数组长度-1）</strong></p>
</li>
<li><p>扰动处理：加大哈希码低位的随机性，使得分布更均匀，从而提高对应数组存储下标位置的随机性 &amp; 均匀性，最终减少Hash冲突</p>
</li>
</ul>
</li>
<li><p><code>putVal</code>操作</p>
<ul>
<li><p>具体流程</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uBsA41.png" alt="putval.png"></p>
</li>
<li><p><img src="https://s2.ax1x.com/2019/10/04/uBsSjU.png" alt="put.jpg"></p>
</li>
<li><p>扩容机制（resize()）</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uBs9uF.png" alt="resize.jpg"></p>
<p>扩容机制对比，</p>
<p><img src="https://s2.ax1x.com/2019/10/04/uBkCjA.png" alt="对比.jpg"></p>
</li>
</ul>
</li>
<li><p>结论</p>
</li>
</ol>
<p><strong>References</strong></p>
<p><a href="https://juejin.im/post/5aa5d8d26fb9a028d2079264">Java源码分析：HashMap 1.8 相对于1.7 到底更新了什么？</a></p>
<p><a href="https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/">HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</a></p>
<p><a href="https://javadoop.com/post/hashmap">Java7&#x2F;8 中的 HashMap 和 ConcurrentHashMap 全解析</a></p>
<p><a href="https://www.cnblogs.com/lycroseup/p/7344321.html">HASHMAP之扰动函数和低位掩码</a></p>
<p><a href="https://blog.csdn.net/qq_36520235/article/details/82417949">美团面试题：Hashmap的结构，1.7和1.8有哪些区别，史上最深入的分析</a></p>
<p><a href="https://blog.csdn.net/Leon_cx/article/details/81947991">HashMap源码分析，基于1.8，对比1.7</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java8之扩展函数式接口</title>
    <url>/2020/05/04/Java8%E4%B9%8B%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>先看一下官方定义</p>
<blockquote>
<p><em>Functional interfaces</em> provide target types for lambda expressions and method references.</p>
</blockquote>
<p>可以看出函数式接口主要用于lambda表达式，这类接口只定义了唯一的抽象方法的接口（除了隐含的Object对象的公共方法），一开始也称<em>SAM</em>类型接口(Single Abstract Method)。</p>
<span id="more"></span>

<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Lists.newArrayList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        list.forEach(r -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;re = &quot;</span> + Math.sqrt(r));</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>看一下  <code>foreach</code> 实现，在<code>Iterable.java</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="built_in">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里出现的<code>Consumer</code>就是一个函数式接口， java8 提供了一些常用的函数式接口</p>
<ul>
<li>Predicate – 传入一个参数，返回一个bool结果， 方法为<code>boolean test(T t)</code></li>
<li>Consumer – 传入一个参数，无返回值，纯消费。 方法为<code>void accept(T t)</code></li>
<li>Function – 传入一个参数，返回一个结果，方法为<code>R apply(T t)</code></li>
<li>Supplier – 无参数传入，返回一个结果，方法为<code>T get()</code></li>
<li>UnaryOperator – 一元操作符， 继承Function,传入参数的类型和返回类型相同。</li>
<li>BinaryOperator – 二元操作符， 传入的两个参数的类型和返回类型相同， 继承BiFunction</li>
</ul>
<p>这里就不一一列举了，具体请见 java.util.function 包 都很简单，不太清楚的自行google</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>但是jdk提供的有时候不一定能满足需求，这个时候就需要我们自定义函数式接口</p>
<ol>
<li><p>普通的 Function 或者 Consumer 只能就收一个参数，BiFuntion 和 BiConsumer 也只能接受连个参数，参数更多的情况就无法满足了</p>
<p>以 consumer 为例，先自定义一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TriConsumer</span>&lt;T, U, W&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t, U u, W w)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> TriConsumer&lt;T, U, W&gt; <span class="title function_">andThen</span><span class="params">(TriConsumer&lt;? <span class="built_in">super</span> T, ? <span class="built_in">super</span> U, ? <span class="built_in">super</span> W&gt; after)</span> &#123;</span><br><span class="line">            Objects.requireNonNull(after);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (l, r, w) -&gt; &#123;</span><br><span class="line">                accept(l, r, w);</span><br><span class="line">                after.accept(l, r, w);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>函数式接口一般使用 @FunctionalInterface 注解注释，以申明该接口是一个函数式接口， 这里提供一个 andThen 方法以支持连续调用</p>
<p>使用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TriConsumer&lt;Integer, Integer, Integer&gt; consumer = (a, b, c) -&gt; &#123;</span><br><span class="line">            System.out.println(a + b + c);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<p>funtion类似，这里就不举例了</p>
</li>
<li><p>异常捕获</p>
<p>FunctionalInterface 提供的接口一般是不抛出异常的，意味着我们在使用的时候需要在方法体内部捕获异常，这里定义一种可以抛出异常的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceException</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(T t)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>References</strong></p>
<p><a href="https://colobu.com/2014/10/28/secrets-of-java-8-functional-interface/">Java 8函数式接口functional interface的秘密</a></p>
]]></content>
  </entry>
  <entry>
    <title>Jenkins API 实践</title>
    <url>/2019/06/15/Jenkins%20API%20%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>获取项目配置</p>
<p>curl -X GET <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/config.xml">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/config.xml</a></p>
<span id="more"></span>

<h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><p>curl -X POST  <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/build">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/build</a>    -F ‘json&#x3D;{“parameter”: [{“name”: “Project”, “value”: “geek-icem-gateway”}, {“name”: “Branch”, “value”: “ad”}]}’</p>
<p>curl -X POST  <a href="http://127.0.0.1:37555/job/geek-icem_backend_build-packages/build">http://127.0.0.1:37555/job/geek-icem_backend_build-packages/build</a> –user admin:Jenkins  -H ‘cache-control: no-cache’  -F ‘json&#x3D;{“parameter”: [{“name”: “Project”, “value”: “geek-icem-gateway”}, {“name”: “Branch”, “value”: “ad”}]}’</p>
<h4 id="获取构建信息"><a href="#获取构建信息" class="headerlink" title="获取构建信息"></a>获取构建信息</h4><p>curl -X GET <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/lastCompletedBuild/api/json">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/lastCompletedBuild/api/json</a></p>
<h4 id="获取构建信息-1"><a href="#获取构建信息-1" class="headerlink" title="获取构建信息"></a>获取构建信息</h4><p>curl -X GET <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/lastBuild/api/json">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/lastBuild/api/json</a></p>
<h4 id="获取控制台日志"><a href="#获取控制台日志" class="headerlink" title="获取控制台日志"></a>获取控制台日志</h4><p>curl -X GET <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/17/consoleText">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/17/consoleText</a></p>
<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Terminology">lastBuild, lastStableBuild, lastSuccessfulBuild, lastFailedBuild, lastUnstableBuild, lastUnsuccessfulBuild, lastCompletedBuild</a></p>
<h4 id="获取描述"><a href="#获取描述" class="headerlink" title="获取描述"></a>获取描述</h4><p>curl -X GET <a href="http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/description">http://admin:Jenkins@127.0.0.1:37555/job/geek-icem_backend_build-packages/description</a></p>
<p>References</p>
<p><a href="https://blog.csdn.net/wanglin_lin/article/details/73849146">jenkins 出现“Error 403 No valid crumb was included in the request ”的解决方案</a></p>
<p><a href="https://python-jenkins.readthedocs.io/en/latest/api.html">python-jenkins</a></p>
<p><a href="https://www.cnblogs.com/baiyangcao/p/gitpython.html">使用 Python 操作 Git 版本库 - GitPython</a></p>
<p><a href="https://www.cnblogs.com/chongyou/p/8683360.html">Jenkins获取编译状态</a></p>
<p><a href="https://gitpython.readthedocs.io/en/stable/tutorial.html">GitPython Tutorial</a></p>
]]></content>
  </entry>
  <entry>
    <title>Logitech Options 在 Mac 下的自定义按键失灵问题</title>
    <url>/2019/11/23/Logitech%20Options%20%E5%9C%A8%20Mac%20%E4%B8%8B%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE%E5%A4%B1%E7%81%B5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>罗技鼠标的自定义按键很好远，但自从升级系统到10.15 catalina后自定义按键就失灵了，重启，重装Logitech Options，重新授权…一番折腾后终于找到了彻底的解决办法</p>
<span id="more"></span>

<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>系统：MacOS 10.15 Catalina</p>
<p>鼠标：MX720</p>
<p>Logitech Options 版本：8.02.86</p>
<h3 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h3><ol>
<li>修改Security &amp; Privacy 里的 Logi Options Daemon 和 Logi Options 权限，发现已经勾选了</li>
<li>重新安装Logitech Options勾选权限，仍然无法使用</li>
</ol>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li><p>删除Logi Options和Logi Options Daemon后，再次添加这两项</p>
<p><img src="https://raw.githubusercontent.com/silloy/notepic/master/YJvFUL.png" alt="logi.png"></p>
</li>
<li><p>Security &amp; Privacy -&gt; Privacy 中添加<code>Input Monitoring</code>权限</p>
<p><img src="https://raw.githubusercontent.com/silloy/notepic/master/Dx40J2.png" alt="input.png"></p>
</li>
<li><p>如果需要自定义鼠标截图，还需要添加 <code>Screen Recording</code>权限</p>
</li>
</ol>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>仔细看了Catalina的新特性，新系统对于安全和权限管理更加严格了，所以需要单独处理，至于Logitech Options需要的权限，可以参考<a href="https://support.logi.com/hc/en-001/articles/360023203954-Logitech-Options-permission-prompts-on-macOS-Mojave">Logitech Options permission prompts on macOS Catalina and macOS Mojave</a>，新系统中其他软件遇到类似的问题，都可以通过这种方式解决</p>
<p><strong>References</strong></p>
<p><a href="https://www.v2ex.com/t/572690">Logitech Options 在 Mac 下的自定义按键经常会失灵</a></p>
<p><a href="https://support.logi.com/hc/en-001/articles/360023203954-Logitech-Options-permission-prompts-on-macOS-Mojave">Logitech Options permission prompts on macOS Catalina and macOS Mojave</a></p>
]]></content>
  </entry>
  <entry>
    <title>MySQL修改密码</title>
    <url>/2016/06/27/MySQL%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>记录MySQL修改密码的几种方式</p>
<span id="more"></span>

<h3 id="用SET-PASSWORD命令"><a href="#用SET-PASSWORD命令" class="headerlink" title="用SET PASSWORD命令"></a>用SET PASSWORD命令</h3><p>首先登录MySQL。<br>格式：mysql&gt; set password for 用户名@localhost &#x3D; password(‘新密码’);<br>例子：mysql&gt; set password for root@localhost &#x3D; password(‘123’); </p>
<h3 id="用mysqladmin"><a href="#用mysqladmin" class="headerlink" title="用mysqladmin"></a>用mysqladmin</h3><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码<br>例子：mysqladmin -uroot -p123456 password 123 </p>
<h3 id="用UPDATE直接编辑user表"><a href="#用UPDATE直接编辑user表" class="headerlink" title="用UPDATE直接编辑user表"></a>用UPDATE直接编辑user表</h3><p>首先登录MySQL。<br>mysql&gt; use mysql;<br>mysql&gt; update user set password&#x3D;password(‘123’) where user&#x3D;’root’ and host&#x3D;’localhost’;<br>mysql&gt; flush privileges; </p>
<h3 id="在忘记root密码的时候，可以这样"><a href="#在忘记root密码的时候，可以这样" class="headerlink" title="在忘记root密码的时候，可以这样"></a>在忘记root密码的时候，可以这样</h3><p>以windows为例： </p>
<ol>
<li>关闭正在运行的MySQL服务。 </li>
<li>打开DOS窗口，转到mysql\bin目录。 </li>
<li>输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 </li>
<li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。 </li>
<li>输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 </li>
<li>连接权限数据库： use mysql; 。 </li>
<li>改密码：update user set password&#x3D;password(“123”) where user&#x3D;”root”;（别忘了最后加分号） 。 </li>
<li>刷新权限（必须步骤）：flush privileges;　。 </li>
<li>退出 quit。 </li>
<li>注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</li>
</ol>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL定时任务</title>
    <url>/2016/08/04/MySQL%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数据定时更新非常有必要，自MySQL5.1.6起，增加了事件调度器，可以用来执行某些定时任务。简要记录一下创建过程。</p>
<span id="more"></span>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li>windows10</li>
<li>MySQL5.6</li>
</ol>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="开启event-scheduler"><a href="#开启event-scheduler" class="headerlink" title="开启event_scheduler"></a>开启event_scheduler</h4><blockquote>
<p><code>set global event_scheduler = 1;</code></p>
</blockquote>
<blockquote>
<p>my.cnf 加上 <code>event_scheduler = 1</code></p>
</blockquote>
<blockquote>
<p><code>set global event_scheduler = ON;</code></p>
</blockquote>
<blockquote>
<p><code>mysqld  --event_scheduler=1;</code></p>
</blockquote>
<p>查看是否开启了event_scheduler</p>
<blockquote>
<p><code>show varuables like &#39;event_scheduler&#39;;</code></p>
</blockquote>
<blockquote>
<p><code>select @@event_scheduler;</code></p>
</blockquote>
<blockquote>
<p><code>show processlist;</code></p>
</blockquote>
<h4 id="创建事件-create-event"><a href="#创建事件-create-event" class="headerlink" title="创建事件(create event)"></a>创建事件(create event)</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT [IFNOT EXISTS] event_name</span><br><span class="line">ONSCHEDULE schedule</span><br><span class="line">[ONCOMPLETION [NOT] PRESERVE]</span><br><span class="line">[ENABLE | DISABLE]</span><br><span class="line">[COMMENT &#x27;comment&#x27;]</span><br><span class="line">DO sql_statement;</span><br></pre></td></tr></table></figure>

<p>schedual:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT TIMESTAMP [+ INTERVAL INTERVAL]</span><br><span class="line">| EVERY INTERVAL [STARTS TIMESTAMP] [ENDS TIMESTAMP]</span><br></pre></td></tr></table></figure>

<p>INTERVAL:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quantity &#123;YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |</span><br><span class="line">WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |</span><br><span class="line">DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ol>
<li><p>每秒插入一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE tarena;</span><br><span class="line">CREATE TABLE aaa (timeline TIMESTAMP);</span><br><span class="line">CREAT EEVENT e_test_insert</span><br><span class="line">ON SCHEDULE EVERY 1 SECOND</span><br><span class="line">DO INSERTINTO tarena.aaa VALUES(CURRENT_TIMESTAMP);</span><br></pre></td></tr></table></figure>
</li>
<li><p>5天后清空表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 5 DAY</span><br><span class="line">DO TRUNCATETABLE tarena.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预约清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE AT TIMESTAMP &#x27;2007-07-20 12:00:00&#x27;</span><br><span class="line">DO TRUNCATETABLE tarena.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定时清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE EVERY 1 DAY</span><br><span class="line">DO TRUNCATETABLE tarena.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预约定时清空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ONSCHEDULE EVERY 1 DAY</span><br><span class="line">STARTS CURRENT_TIMESTAMP+ INTERVAL 5 DAY</span><br><span class="line">DO TRUNCATETABLE tarena.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定时清空，一段时间后停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE EVERY 1 DAY</span><br><span class="line">ENDS CURRENT_TIMESTAMP+ INTERVAL 5 DAY</span><br><span class="line">DO TRUNCATETABLE test.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>预约定时清空，一段时间后停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE EVERY 1 DAY</span><br><span class="line">STARTS CURRENT_TIMESTAMP+ INTERVAL 5 DAY</span><br><span class="line">ENDS CURRENT_TIMESTAMP+ INTERVAL 1 MONTH</span><br><span class="line">DO TRUNCATETABLE test.aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定时清空，执行一次后终止<br>  <code>[ON COMPLETION [NOT] PRESERVE]可以设置这个事件是执行一次还是持久执行，默认为NOT PRESERVE。</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT e_test</span><br><span class="line">ON SCHEDULE EVERY 1 DAY</span><br><span class="line">ON COMPLETION NOT PRESERVE</span><br><span class="line">DO TRUNCATETABLE test.aaa;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>[ENABLE | DISABLE]可是设置该事件创建后状态是否开启或关闭，默认为ENABLE。 　　[COMMENT ‘comment’]可以给该事件加上注释。</code></p>
<h4 id="修改事件-ALTER-EVENT"><a href="#修改事件-ALTER-EVENT" class="headerlink" title="修改事件(ALTER EVENT)"></a>修改事件(ALTER EVENT)</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER EVENT event_name</span><br><span class="line">[ONSCHEDULE schedule]</span><br><span class="line">[RENAME TOnew_event_name]</span><br><span class="line">[ONCOMPLETION [NOT] PRESERVE]</span><br><span class="line">[COMMENT &#x27;comment&#x27;]</span><br><span class="line">[ENABLE | DISABLE]</span><br><span class="line">[DO sql_statement]</span><br></pre></td></tr></table></figure>

<h5 id="临时关闭事件"><a href="#临时关闭事件" class="headerlink" title="临时关闭事件"></a>临时关闭事件</h5><p><code>ALTER EVENT e_test DISABLE;</code></p>
<h5 id="开启事件"><a href="#开启事件" class="headerlink" title="开启事件"></a>开启事件</h5><p><code>ALTER EVENT e_test ENABLE;</code></p>
<h5 id="时间点修改"><a href="#时间点修改" class="headerlink" title="时间点修改"></a>时间点修改</h5><p><code>ALTER EVENT e_test ON SCHEDULE EVERY 5 DAY;</code></p>
<h4 id="删除事件-DROP-EVENT"><a href="#删除事件-DROP-EVENT" class="headerlink" title="删除事件(DROP EVENT)"></a>删除事件(DROP EVENT)</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><p><code>DROP EVENT [IF EXISTS] event_name</code></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create  procedure `Slave_Monitor`()</span><br><span class="line">begin</span><br><span class="line">SELECT VARIABLE_VALUE INTO @SLAVE_STATUS</span><br><span class="line">FROM information_schema.GLOBAL_STATUS</span><br><span class="line">WHERE VARIABLE_NAME=&#x27;SLAVE_RUNNING&#x27;;</span><br><span class="line">IF (&#x27;ON&#x27;!= @SLAVE_STATUS) THEN</span><br><span class="line">SET GLOBAL SQL_SLAVE_SKIP_COUNTER=0;</span><br><span class="line">SLAVE START;</span><br><span class="line">END IF;</span><br><span class="line">end; //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT IFNOT EXISTS `Slave_Monitor`</span><br><span class="line">ON SCHEDULE EVERY 5 SECOND</span><br><span class="line">ON COMPLETION PRESERVE</span><br><span class="line">DO CALL Slave_Monitor();</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Explain详解</title>
    <url>/2018/08/08/MySQL%20Explain%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>日常工作中主要用explain来查看sql语句的执行计划，深入了解是否需要优化，已经索引等信息。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251731YYxfBP21.png" alt="202005251731YYxfBP21"></p>
<span id="more"></span>

<p>执行explain命令会生成一个QEP(query execution plan)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">explain <span class="keyword">select</span> * from servers;</span></span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |</span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">row in set (0.03 sec)</span><br></pre></td></tr></table></figure>

<p>一、 <strong>id</strong></p>
<p>​     <strong>我的理解是SQL执行的顺序的标识,SQL从大到小的执行</strong></p>
<ol>
<li><p>id相同时，执行顺序由上至下</p>
</li>
<li><p>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
</li>
</ol>
<p>3.id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p>
<p><strong>二、select_type</strong></p>
<p>​      <strong>示查询中每个select子句的类型</strong></p>
<p>(1) SIMPLE(简单SELECT,不使用UNION或子查询等)</p>
<p>(2) PRIMARY(查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY)</p>
<p>(3) UNION(UNION中的第二个或后面的SELECT语句)</p>
<p>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>
<p>(5) UNION RESULT(UNION的结果)</p>
<p>(6) SUBQUERY(子查询中的第一个SELECT)</p>
<p>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，取决于外面的查询)</p>
<p>(8) DERIVED(派生表的SELECT, FROM子句的子查询)</p>
<p>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>
<p><strong>三、table</strong></p>
<p>显示这一行的数据是关于哪张表的，有时不是真实的表名字,看到的是derivedx(x是个数字,我的理解是第几步执行的结果)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from (select * from ( select * from t1 where id=2602) a) b;</span><br><span class="line">+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table      | type   | possible_keys     | key     | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL              | NULL    | NULL    | NULL |    1 |       |</span><br><span class="line">|  2 | DERIVED     | &lt;derived3&gt; | system | NULL              | NULL    | NULL    | NULL |    1 |       |</span><br><span class="line">|  3 | DERIVED     | t1         | const  | PRIMARY,idx_t1_id | PRIMARY | 4       |      |    1 |       |</span><br><span class="line">+----+-------------+------------+--------+-------------------+---------+---------+------+------+-------+ </span><br></pre></td></tr></table></figure>

<p><strong>四、type</strong></p>
<p>表示MySQL在表中找到所需行的方式，又称“访问类型”。</p>
<p>常用的类型有： <strong>ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）</strong></p>
<p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>
<p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p>
<p>range:只检索给定范围的行，使用一个索引来选择行</p>
<p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>
<p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p>
<p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量,system是const类型的特例，当查询的表只有一行的情况下，使用system</p>
<p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>
<p><strong>五、possible_keys</strong></p>
<p><strong>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用</strong></p>
<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>
<p><strong>六、Key</strong></p>
<p><strong>key列显示MySQL实际决定使用的键（索引）</strong></p>
<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>
<p><strong>七、key_len</strong></p>
<p><strong>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</strong></p>
<p>不损失精确性的情况下，长度越短越好 </p>
<p><strong>八、ref</strong></p>
<p><strong>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</strong></p>
<p><strong>九、rows</strong></p>
<p> <strong>表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</strong></p>
<p><strong>十、Extra</strong></p>
<p><strong>该列包含MySQL解决查询的详细信息,有以下几种情况：</strong></p>
<p>Using where:列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>
<p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</p>
<p>Using filesort：MySQL中无法利用索引完成的排序操作称为“文件排序”</p>
<p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>
<p>Impossible where：这个值强调了where语句会导致没有符合条件的行。</p>
<p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>
<p><strong>总结：****• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况• EXPLAIN不考虑各种Cache• EXPLAIN不能显示MySQL在执行查询时所作的优化工作• 部分统计信息是估算的，并非精确值• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。</strong></p>
<p>转载自 <a href="http://www.cnblogs.com/xuanzhi201111/p/4175635.html">http://www.cnblogs.com/xuanzhi201111/p/4175635.html</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>reprinted</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos 配置 MySQL 8.0 数据库</title>
    <url>/2019/11/15/Nacos%20%E9%85%8D%E7%BD%AE%20MySQL%208.0%20%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>Nacos 1.2.0版本以前是不支持MySQL8.0，如果出现配置保存不了，500的错误，多是由于数据源的问题，需要修改源码以支持MySQL8.0。</p>
<span id="more"></span>

<h3 id="从github克隆源码"><a href="#从github克隆源码" class="headerlink" title="从github克隆源码"></a>从github克隆源码</h3><blockquote>
<p>git clone <a href="https://github.com/alibaba/nacos.git">https://github.com/alibaba/nacos.git</a></p>
</blockquote>
<h3 id="修改pom驱动版本（最外层pom）"><a href="#修改pom驱动版本（最外层pom）" class="headerlink" title="修改pom驱动版本（最外层pom）"></a>修改pom驱动版本（最外层pom）</h3><blockquote>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <!-- <version>5.1.34</version> -->
    <version>8.0.19</version>
</dependency>
</blockquote>
<h4 id="修改源码引用"><a href="#修改源码引用" class="headerlink" title="修改源码引用"></a>修改源码引用</h4><p><strong>位置</strong> <code>nacos/naming/src/main/java/com/alibaba/nacos/naming/healthcheck/MysqlHealthCheckProcessor.java</code></p>
<blockquote>
<p>&#x2F;&#x2F; import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;原本引用的类<br>import com.mysql.cj.jdbc.MysqlDataSource;</p>
</blockquote>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nacos/</span><br><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U  </span><br><span class="line">ls -al distribution/target/nacos-server-1.2.0-SNAPSHOT/nacos</span><br></pre></td></tr></table></figure>

<p>注意修改targeta下的jar包名为 <code>nacos-server.jar</code></p>
<p>修改conf里的配置文件</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入bin目录，以官方提供的方式启动 <code>sh startup.sh -m standalone</code></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>如果出现异常，可以通过<code>logs/nacos.log</code>查看具体的启动异常</p>
<p><strong>References</strong></p>
<p><a href="https://blog.csdn.net/Mr_Mocha/article/details/102868380">Nacos 配置 MySQL8数据库</a></p>
<p><a href="https://nacos.io/zh-cn/docs/quick-start.html">Nacos 快速开始</a></p>
]]></content>
  </entry>
  <entry>
    <title>OKR理解与实施</title>
    <url>/2019/04/05/OKR%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E6%96%BD/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>目标和关键成果</strong>(Objectives and Key Results) </p>
<span id="more"></span>

<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ol>
<li><p><strong>OKRs要是可量化的（时间&amp;数量）</strong>，比如不能说“使gmail达到成功”而是“在9月上线gmail并在11月有100万用户”</p>
</li>
<li><p>目标要是<strong>有野心的</strong>，有一些挑战的，有些让你不舒服的。一般来说，1为总分的评分，达到0.6-0.7是较好的了，这样你才会不断为你的目标而奋斗，而不会出现期限不到就完成目标的情况。</p>
</li>
<li><p>每个人的OKRs在全公司都是<strong>公开透明</strong>的。比如每个人的介绍页里面就放着他们的OKRs的记录，包括内容和评分</p>
</li>
</ol>
<h2 id="两个不同"><a href="#两个不同" class="headerlink" title="两个不同"></a>两个不同</h2><ol>
<li><p>O和KR的不同：O要是有挑战性的，如果是板上钉钉的事情就是不够的；KRs能很好的支持O的完成，是要明显可量化的，便于评分的。</p>
</li>
<li><p>个人、组、公司OKRs的不同：个人OKRs是你个人展现你将会做什么；组的OKRs不是个人打包，是组优先做的事情；公司OKRs是高层对整个公司的展望。</p>
</li>
</ol>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li>目标的协调和统一。公司 -&gt; 团队-&gt; 个人目标层层分解，每个人不再只关注自己的工作，而是能够看到”the bigger picture”，了解自己在团队和公司整体目标中发挥的作用，让自己的工作更有意义，从而更有积极性。并且，所有团队的目标都能被统一地联系在一起，执行起来可以相互支持；</li>
<li>判断优先级。通过梳理 OKRs，能找出最重要的事情，让全公司专注在最有价值的事情上，便于做出取舍，最有效地利用资源；</li>
<li>双向沟通。OKRs 的制定由员工和自己的直线上级一起制定，需要双方同意，而不是简单粗暴的由上而下，员工只是被动接受</li>
<li>灵活调整。不像 KPI 是死的，只要目标不变，OKRs 中的关键事件（Key Results）在回顾的过程中可以根据情况随时灵活调整；</li>
<li>鼓励创新。员工有自主权去制定有挑战性的目标，而不是拘泥于公司设定的框架里。往往能激发和产生出一些意想不到的新想法和结果，鼓励公司内部创新的发生。</li>
</ol>
<h2 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h2><p><strong>SMART</strong></p>
<h2 id="责任分配矩阵-RAM"><a href="#责任分配矩阵-RAM" class="headerlink" title="责任分配矩阵(RAM)"></a>责任分配矩阵(RAM)</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ol>
<li>清楚界定每项成果</li>
<li>为项目的每项成果设定责任人</li>
<li>让跨职能沟通更为有效</li>
<li>加速项目决策流程，简化审批</li>
</ol>
<h3 id="分配基本原则-RACI模型"><a href="#分配基本原则-RACI模型" class="headerlink" title="分配基本原则(RACI模型)"></a>分配基本原则(RACI模型)</h3><ol>
<li>相互独立，完全穷尽（Mutually Exclusive Collectively Exhaustive，MECE）：分解的任务各部分之间相互独立，所有部分完全覆盖任务的各个部分；</li>
<li>结果导向，而非行动：分解任务时关注结果，而不要陷入对细节行动的过分关注当中，导致分解过于繁琐复杂</li>
</ol>
<p><strong>References</strong></p>
<p><a href="https://www.heimabao.com/blog/29-font-awesome-icons-2">转：力荐神器级员工考核工具：谷歌OKR</a></p>
<p><a href="https://www.heimabao.com/blog/49-alibaba-zhoubao-4">一张图、一颗心、一场仗，阿里巴巴的绩效之道</a></p>
<p><a href="http://okrblog.com/archives/548">揭秘阿里leader的绩效管理之道</a></p>
<p><a href="https://webcache.googleusercontent.com/search?q=cache:BZJNoaU9uykJ:https://www.teambition.com/best/practices/article?_id=55fa1ff0464b9b3453b97655+&cd=1&hl=en&ct=clnk&gl=hk&lr=lang_en%7Clang_zh-CN">OKRs 与目标分解</a></p>
<p><a href="https://blog.teambition.com/blog/knowledge-forefront/2018-08-16-6732/">关于 OKR 的常见问题</a></p>
<p><a href="https://blog.teambition.com/blog/insight/OKRs/">教你几招，即刻开始实施 OKRs</a></p>
]]></content>
  </entry>
  <entry>
    <title>Oracle基础命令</title>
    <url>/2016/05/09/Oracle%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>主流关系型数据库: Oracle，DB2，Sybase，SQL server，MySQL<br>这里主要记录一下oracle数据库初步学习过程，涉及少量与mysql的不同讨论。<a href="http://www.w3school.com.cn/sql/">基本的SQL知识</a></p>
<span id="more"></span>

<h3 id="SQL（Structured-Query-Language）"><a href="#SQL（Structured-Query-Language）" class="headerlink" title="SQL（Structured Query Language）"></a>SQL（Structured Query Language）</h3><h4 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h4><ul>
<li>SQL可分为<ul>
<li>数据定义语言DDL: CREATE, ALTER, DROP, TRUNCATE</li>
<li>数据操纵语言DML: INSERT, UPDATE, DELETE</li>
<li>事务控制语言TCL: COMMIT, ROLLBACK, SAVEPOINT</li>
<li>数据查询语言DQL: SELECT</li>
<li>数据控制语言DCL: GRANT, REVOKE, CREATE USER</li>
</ul>
</li>
<li>NUMBER: 数字类型<ul>
<li>定义: NUMBER（P，S）</li>
<li>FYI: MySQL里没有number类型，对应的是int，float……</li>
</ul>
</li>
<li>CHAR: 固定长度的字符类型<ul>
<li>定义: CHAR(N)</li>
<li>最多保存2000字节</li>
<li>FYI: 对应MySQL里的CHAR</li>
</ul>
</li>
<li>VARCHAR2: 变长的字符类型<ul>
<li>定义: VARCHAR2(N)</li>
<li>最多保存4000字节</li>
<li>FYI: 对应MySQL里的VARCHAR</li>
</ul>
</li>
<li>DATE: 日期时间数据<ul>
<li>默认格式: DD-MON-RR</li>
</ul>
</li>
<li>DEFAULT: 指定默认值</li>
<li>NOT NULL: 非空约束</li>
<li>DROP<ul>
<li>删除列或表</li>
</ul>
</li>
<li>LONG: VARCHAR2加长版<ul>
<li>限制: 每个表只能有一个long列，不能作为主键，不能建立索引，不能出现在查询条件中</li>
<li>FYI: MySQL没有long型</li>
</ul>
</li>
<li>CLOB: 存储定长或变长字符串，oracle建议使用clob替代long型</li>
<li>执行DML操作后，需要在执行commit，才算真正确认了此操作</li>
</ul>
<h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul>
<li>UPPER, LOWER, INITCAP: 大小写转换</li>
<li>TRIM, LTRIM, RTRIM: 截去子串</li>
<li>LPAD, RPAD: 补位函数<ul>
<li>LPAD(char1, n, char2)</li>
<li>RPAD(char1, n, char2)</li>
</ul>
</li>
<li>SUBSTR: 获取子串<ul>
<li>SUBSTR(char, m[, n])</li>
</ul>
</li>
<li>INSTR: 返回子串在父串中的位置<ul>
<li>INSTR(char1, char2[, n[, m]])<ul>
<li>n: 开始搜索的位置，默认为1</li>
<li>m: 指定子串第m次出现，默认为1</li>
<li>没找到，返回0</li>
</ul>
</li>
</ul>
</li>
<li>ROUND：四舍五入<ul>
<li>ROUND(n[, m])<ul>
<li>n: 可以是任何数字，指要被处理的数字</li>
<li>m：必须是整数，四舍五入的位数，可以是负数，默认是0</li>
</ul>
</li>
</ul>
</li>
<li>MOD: 取余<ul>
<li>MOD(m, n)  n为0直接返回m</li>
</ul>
</li>
<li>CEIL<ul>
<li>CEIL(n)</li>
</ul>
</li>
<li>FLOOR<ul>
<li>FLOOR(n)</li>
</ul>
</li>
<li>CONCAT, “||”</li>
</ul>
<h5 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h5><ul>
<li><p>DATE</p>
<ul>
<li>范围：公元前4712年1月1日至公元9999年12月31日</li>
<li>占用7个字节</li>
<li>byte 1: 世纪+100</li>
<li>byte 2: 年</li>
<li>byte 3: 月</li>
<li>byte 4: 日</li>
<li>byte 5: 小时 + 1</li>
<li>byte 6: 分 + 1</li>
<li>byte 7: 秒 + 1</li>
</ul>
</li>
<li><p>TIMESTAMP</p>
<ul>
<li>最高精度可以到ns</li>
<li>占用7或者11个字节，精度为0，用7字节存储，精度大于0用11字节存储</li>
<li>精度：第8-11字节，内部运算类型为整型</li>
</ul>
</li>
<li><p>SYSDATE: SystemDate</p>
</li>
<li><p>SYSTIMESTAMP: 返回当前系统日期和时间，精确到毫秒</p>
</li>
<li><p>TO_DATE：字符串转换为日期类型</p>
<ul>
<li>TO_DATE(char[, fmt[, nlsparams]])<ul>
<li><p>fmt: 格式</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251720HLa2kn12.jpg" alt="202005251720HLa2kn12"></p>
</li>
<li><p>nlsparams: 指定日期语言</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>TO_CHAR</p>
<ul>
<li>TO_CHAR(date[, fmt[, nlsparams]])</li>
</ul>
</li>
<li><p>LAST_DAY</p>
<ul>
<li>LAST_DAY(date): 返回日期date所在月的最后一天</li>
</ul>
</li>
<li><p>ADD_MONTHS</p>
<ul>
<li>ADD_MONTHS(date, i)</li>
</ul>
</li>
<li><p>MONTHS_BETWEEN</p>
<ul>
<li>MONTHS_BETWEEN(date1, date2): 计算月份差</li>
</ul>
</li>
<li><p>NEXT_DAY</p>
<ul>
<li>NEXT_DAY(date, char): 返回date日期的下一个周几</li>
</ul>
</li>
<li><p>LEAST, GREATEST</p>
<ul>
<li>GREATEST(expr1[,expr2[, expr3]]…)</li>
</ul>
</li>
<li><p>EXTRACT</p>
<ul>
<li>EXTRACT(date from datetime): 提取日期中的年、月、日等</li>
</ul>
</li>
</ul>
<h5 id="空值操作"><a href="#空值操作" class="headerlink" title="空值操作"></a>空值操作</h5><ul>
<li>NVL<ul>
<li>NVL(expr1, expr2): expr1为null则转变为expr2，数据类型必须一致</li>
</ul>
</li>
<li>NVL2<ul>
<li>NVL2(expr1, expr2, expr3): expr1非null返回我想expr2，为null返回expr3</li>
</ul>
</li>
</ul>
<h4 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h4><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><ul>
<li>ROWNUM：伪列，用于返回标识行数据顺序的数字<ul>
<li>只能从1计数，不能从结果集中直接截取</li>
<li>部分数据需要用到行内视图</li>
<li>PageN: (n - 1) * pageSize + 1   ~   n * pageSize</li>
</ul>
</li>
</ul>
<h5 id="DECODE函数"><a href="#DECODE函数" class="headerlink" title="DECODE函数"></a>DECODE函数</h5><ul>
<li><p>DECODE(expr, search1, result1[,search2, result2….][, default])</p>
</li>
<li><p>用途： 比较expr的值，若匹配到哪一个search，返回对应result，类似于case语句</p>
</li>
<li><p>应用场景：</p>
<ul>
<li>分组查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DECODE(job, &#x27;ANALYST&#x27;, &#x27;VIP&#x27;, &#x27;MANAGER&#x27;, &#x27;VIP&#x27;, &#x27;OPERATION&#x27;)job, COUNT(1)job_count FROM emp </span><br><span class="line">GROUP BY DECODE(job, &#x27;ANALYST&#x27;, &#x27;VIP&#x27;, &#x27;MANAGER&#x27;, &#x27;VIP&#x27;, &#x27;OPERATION&#x27;);</span><br></pre></td></tr></table></figure>

<ul>
<li>字段内容排序<br><code>ORDER BY DECODE(job, &#39;ANALYST&#39;, &#39;1&#39;, &#39;MANAGER&#39;, &#39;2&#39;, &#39;OPERATION&#39;, &#39;3&#39;)</code></li>
</ul>
</li>
</ul>
<h5 id="ROW-NUMBER函数"><a href="#ROW-NUMBER函数" class="headerlink" title="ROW_NUMBER函数"></a>ROW_NUMBER函数</h5><ul>
<li>ROW_NUMBER() OVER(PARTITION BY col1 ORDER BY col2): 根据col1分组，在分组内部根据col2排序</li>
<li>此函数计算的值标识每组内部排序后的顺序编号，组内连续且唯一</li>
</ul>
<h5 id="RANK-NUMBER函数"><a href="#RANK-NUMBER函数" class="headerlink" title="RANK_NUMBER函数"></a>RANK_NUMBER函数</h5><ul>
<li>类似于ROW_NUMBER, 跳跃排序，可以有重复值</li>
</ul>
<h5 id="DENSE-RANK"><a href="#DENSE-RANK" class="headerlink" title="DENSE_RANK"></a>DENSE_RANK</h5><ul>
<li>类似于RANK_NUMBER, 连续排序，有重复，无跳跃</li>
</ul>
<h5 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h5><ul>
<li>UNION: 自动合并去重，排序</li>
<li>UINION ALL：合并不去重，不排序</li>
<li>INTERSECT：交集</li>
<li>MINUS：差集</li>
</ul>
<h5 id="高级分组函数"><a href="#高级分组函数" class="headerlink" title="高级分组函数"></a>高级分组函数</h5><ul>
<li>ROLLUP: 从右向左以一次少一列的方式组合直到所有列都去掉<ul>
<li>GROUP BY ROLLUP(a, b, c)</li>
</ul>
</li>
<li>CUBE: 所以维度的取值集合<ul>
<li>GROUP BY CUBE(a, b, c)</li>
</ul>
</li>
<li>GROUPING SETS:<ul>
<li>GROUP BY GROUPING SETS(a, b, c)</li>
</ul>
</li>
</ul>
<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><ul>
<li>视图(VIEW) 也称虚表，是一组数据的逻辑表示，对应于一条select语句</li>
<li>分类：<ul>
<li>简单视图</li>
<li>复杂视图</li>
<li>连接视图</li>
</ul>
</li>
<li>作用：<ul>
<li>简化复杂查询</li>
<li>限制数据访问<ul>
<li>GRANT CREATE VIEW TO user;</li>
</ul>
</li>
</ul>
</li>
<li>限制约束<ul>
<li>[WITH CHECK OPTION]</li>
<li>[WITH READ ONLY]</li>
</ul>
</li>
</ul>
<h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><ul>
<li>创建序列<ul>
<li>CREATE SEQUENCE[schema.]sequence_name<br>[START WITH i][INCREMENT BY j][MAXVALUE m | NOMAXVALUE][MINVALUE n | NOMINVALUE][CYCLE | NOCYCLE][CACHE p | NOCACHE]</li>
</ul>
</li>
<li>使用序列<ul>
<li>NEXTVAL: 获取序列的下个值</li>
<li>CURRVAL：获取序列的当前值</li>
</ul>
</li>
</ul>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul>
<li>索引(INDEX)是一种允许直接访问数据表中某一数据行的数据结构，为了提高查询效率而引入，是独立于表的对象，可以存放与表不同的表空间中</li>
<li>Syntax：<ul>
<li>CREATE [UNIQUE] INDEX index_name ON table(column[, column…]);</li>
<li>UNIQUE表示唯一索引</li>
</ul>
</li>
</ul>
<h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul>
<li>非空约束 NOT NULL</li>
<li>唯一性约束 UNIQUE</li>
<li>主键约束 PRIMARY KEY</li>
<li>外键约束 FOREIGN KEY</li>
<li>检查约束 CHECK</li>
</ul>
]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>【译】Spring Boot @PropertySource 读取 YAML 文件</title>
    <url>/2018/08/31/Spring%20Boot%20@PropertySource%20%E8%AF%BB%E5%8F%96%20YAML%20%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>Spring Boot 默认不支持<code>@PropertySource</code>读取yaml 文件，这也是Stackoverflow 上经常给予的标准答案。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251716lDz7CR48.png" alt="202005251716lDz7CR48"></p>
<span id="more"></span>

<p>Spring 4.3 通过引入 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/support/PropertySourceFactory.html"><code>PropertySourceFactory</code></a> 接口使之成为可能。<code>PropertySourceFactory</code> 是<code>PropertySource</code> 的工厂类。默认实现是 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/support/DefaultPropertySourceFactory.html"><code>DefaultPropertySourceFactory</code></a>，可以构造<code>ResourcePropertySource</code> 实例。</p>
<p>可以通过普通的是实现构造 createPropertySource， 需要做两点:</p>
<ul>
<li>导入resource 到Properties 对象。</li>
<li>构造 PropertySource 使用Properties。</li>
</ul>
<p>具体例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlPropertySourceFactory</span> <span class="keyword">implements</span> <span class="title class_">PropertySourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(<span class="meta">@Nullable</span> String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">propertiesFromYaml</span> <span class="operator">=</span> loadYamlIntoProperties(resource);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceName</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(sourceName, propertiesFromYaml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">loadYamlIntoProperties</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">            factory.setResources(resource.getResource());</span><br><span class="line">            factory.afterPropertiesSet();</span><br><span class="line">            <span class="keyword">return</span> factory.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="comment">// for ignoreResourceNotFound</span></span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> FileNotFoundException)</span><br><span class="line">                <span class="keyword">throw</span> (FileNotFoundException) e.getCause();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：YAML 需要 SnakeYAML 1.18 或者更高版本。</p>
<p>@PropertySource 注解有一个 <code>factory</code> 属性，通过这个属性来注入 <code>PropertySourceFactory</code>，这里给出 <code>YamlPropertySourceFactory</code>的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@PropertySource(factory = YamlPropertySourceFactory.class, value = &quot;classpath:blog.yaml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlPropertysourceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                SpringApplication.run(YamlPropertysourceApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> ctx.getEnvironment();</span><br><span class="line">        env.getPropertySources()</span><br><span class="line">                .forEach(ps -&gt; System.out.println(ps.getName() + <span class="string">&quot; : &quot;</span> + ps.getClass()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Value of `foo.bar` = &quot;</span> + env.getProperty(<span class="string">&quot;foo.bar&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里使用的是Spring Boot，但是对于Spring 4.3 及其以上版本同样适用。</p>
<p>翻译拙劣，欢迎指正。</p>
<p>References</p>
<p><a href="https://mdeinum.github.io/2018-07-04-PropertySource-with-yaml-files/">Use @PropertySource with YAML files</a></p>
]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data MongoDB 查询语法</title>
    <url>/2019/08/21/Spring%20Data%20MongoDB%20%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li><p>Query 和 Criteria 查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>();</span><br><span class="line">query.addCriteria(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Eric&quot;</span>));</span><br><span class="line">List&lt;User&gt; users = mongoTemplate.find(query, User.class);</span><br></pre></td></tr></table></figure>

<p>支持的查询方法：is, regex, lt, gt, pageable, sort</p>
<span id="more"></span>
</li>
<li><p>生成query方法</p>
<ul>
<li><p>findByX</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findByName</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>startinggWith and endingWith</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findByNameStartingWith</span><span class="params">(String regexp)</span>;</span><br><span class="line">List&lt;User&gt; <span class="title function_">findByNameEndingWith</span><span class="params">(String regexp)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>between</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">findByAgeBetween</span><span class="params">(<span class="type">int</span> ageGT, <span class="type">int</span> ageLT)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>like and orderBy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = userRepository.findByNameLikeOrderByAgeAsc(<span class="string">&quot;A&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JSON Query methods : @Query</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;&#123; &#x27;name&#x27; : ?0 &#125;&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findUsersByName</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure>

<p>支持的查询方法： $regex,  $gt,  $lt</p>
</li>
<li><p>QueryDSL Queries</p>
<p>4.1 maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apt-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/generated-sources/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">processor</span>&gt;</span></span><br><span class="line">              org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor</span><br><span class="line">                <span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.2 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@QueryEntity</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Implement <strong>QueryDslPredicateExecutor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">QUser</span> <span class="variable">qUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QUser</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">Predicate</span> <span class="variable">predicate</span> <span class="operator">=</span> qUser.name.eq(<span class="string">&quot;Eric&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = (List&lt;User&gt;) userRepository.findAll(predicate);</span><br></pre></td></tr></table></figure>

<p>支持的查询方法：is,startinggWith and endingWith, between</p>
</li>
</ol>
<p>​    </p>
]]></content>
      <tags>
        <tag>spring data</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Mybatis通用mapper使用</title>
    <url>/2018/06/15/SpringBoot-Mybatis%E9%80%9A%E7%94%A8mapper%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>mybatis是一个很好用的工具，但是编写mapper是一件很麻烦的事，自mybatis 3.0开始可以使用注解的方式，极大的简化了xml的编写量，本地想看看mybatis源码，自己扩展写一个工具，在阅读源码过程中发现一个通用mapper的工具包，感觉不用重复造轮子了，简要记录一下spring boot整合通用mapper的使用。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251726LljqF400.png" alt="202005251726LljqF400"></p>
<span id="more"></span>

<ol start="0">
<li><p>确保可以正常使用mybatis</p>
</li>
<li><p>pom引入依赖包，starter需要配合@Mapper注解使用，这里采用这种方式，或者使用<code>@MapperScan</code>注解，<code>@tk.mybatis.spring.annotation.MapperScan(basePackages = &quot;扫描包&quot;)</code>配合原生mapper使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;&#123;version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>我使用的版本是2.0.<a href="">2</a></p>
</li>
<li><p>Mybatis 扫描配置（Deprecated, spring 自动配置）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//TODO 注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(MybatisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisMapperScannerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">&quot;org.springboot.sample.mapper&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 这里要特别注意，不要把MyMapper放到 basePackage 中，也就是不能同其他Mapper一样被扫描到。 </span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;mappers&quot;</span>, MyMapper.class.getName());</span><br><span class="line">        properties.setProperty(<span class="string">&quot;notEmpty&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;IDENTITY&quot;</span>, <span class="string">&quot;MYSQL&quot;</span>);</span><br><span class="line">        mapperScannerConfigurer.setProperties(properties);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建BaseMapper类，该类不能被当做普通Mapper一样被扫描 ，不加@Mapper注解，或者放在不同文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zj.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt;, MySqlMapper&lt;T&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务处理dao层，扩展BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zj.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zj.model.OrderInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderInfo&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他和使用普通mybatis一致，service层部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderInfoMapper.insertSelective(info);</span><br><span class="line"><span class="type">OrderInfo</span> <span class="variable">info</span> <span class="operator">=</span> orderInfoMapper.selectByPrimaryKey(id);</span><br></pre></td></tr></table></figure>

<p>通用mapper提供常用的一些操作方法: deleteByPrimaryKey, insert, insertSelective, selectByPrimaryKey, updateByPrimaryKeySelective, updateByPrimaryKey, insertList等很多方法，需要你进一步探索😀😀</p>
</li>
<li><p>主键id问题</p>
<p>当使用insert，insertSelective等方法时，希望返回由数据库产生的逐渐，需要在实体类上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(generator = &quot;JDBC&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long orderInfoId;</span><br></pre></td></tr></table></figure>

<p>generator&#x3D;”JDBC”表示 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键 ，适用于MySQL，SQL Server等的自增主键。</p>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@KeySql(useGeneratedKeys = true)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果实体字段和数据库字段不一致，可以使用<code>@Column</code>注解，其他注解 参见<a href="https://github.com/abel533/Mapper/wiki/2.2-mapping">注解</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column(name=&quot;SCORE_SUM&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String sumScore;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MBG生成参见<a href="https://github.com/abel533/Mapper/wiki/4.1.mappergenerator%EF%BC%8Cdemo%E8%A7%81">https://github.com/abel533/Mapper/wiki/4.1.mappergenerator，demo见</a> <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:silloy&#x2F;mybatis-generator.git</p>
</li>
<li><p>更多细节参见wiki</p>
<p>通用Mapper极大的简化了xml文件的编写，但仍需要少许xml文件，有待进一步优化。同时因为这是一个个人项目，使用不太熟悉不建议使用。</p>
</li>
</ol>
<p><strong>References</strong></p>
<p><a href="http://www.mybatis.tk/">http://www.mybatis.tk/</a></p>
<p><a href="https://github.com/abel533/Mapper/wiki">https://github.com/abel533/Mapper/wiki</a></p>
<p><a href="https://github.com/abel533/Mapper">https://github.com/abel533/Mapper</a></p>
<p><a href="https://blog.csdn.net/qq_19260029/article/details/78010369">https://blog.csdn.net/qq_19260029/article/details/78010369</a></p>
]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题升级</title>
    <url>/2018/03/01/hexo%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<ol>
<li>下载最新next 6.0.4, —&gt; <strong>参见11</strong>，使用模块管理主题</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>备份_config.yml，同时对配置进行修改，相关图片位于next&#x2F;source&#x2F;images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br><span class="line">git clone https://github.com/theme-next/theme-next-algolia-instant-search source/lib/algolia-instant-search</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他插件</p>
<ol>
<li><p>增加阅读进度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br></pre></td></tr></table></figure>
</li>
<li><p>填补字符间空白</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pangu.git source/lib/pangu</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面增加3D渲染，next默认提供两种渲染效果，theme-next-three和canvas_nest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-three source/lib/three</span><br><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>启用以下任意项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">three_waves: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_lines: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_sphere: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>添加访问人数（6.0已原生支持busuanzi，启用即可）</p>
<p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前加上画红线这句话</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后再合适的位置添加显示统计的代码，如图：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user-md&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>pv</strong>的方式，单个用户连续点击n篇文章，记录n次访问量</li>
<li><strong>uv</strong>的方式，单个用户连续点击n篇文章，只记录1次访客数</li>
</ul>
</li>
<li><p>每篇文章末尾统一添加“本文结束”标记</p>
<p><strong>实现方法</strong></p>
<p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">&quot;text-align:center;color: #ccc;font-size:15px;&quot;</span>&gt;--------------都看到这了，请我喝杯咖啡吧！&lt;i <span class="keyword">class</span>=<span class="string">&quot;fa fa-coffee&quot;</span>&gt;&lt;<span class="regexp">/i&gt;--------------&lt;/</span>div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在&#96;&#96; 之后， <code>&lt;footer class=&quot;post-footer&quot;&gt;</code> 之前添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">&#x27;passage-end-tag.swig&#x27;</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件，文章末尾添加标记（不用设置）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增加评论系统</p>
<p><strong>gitment</strong></p>
<p>主题配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line">  <span class="attr">lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line">  <span class="attr">cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide &#x27;Powered by ...&#x27; on footer, and more</span></span><br><span class="line">  <span class="attr">github_user:</span> <span class="string">silloy</span>  <span class="comment"># MUST HAVE, Your Github Username</span></span><br><span class="line">  <span class="attr">github_repo:</span> <span class="string">repo</span>  <span class="comment"># MUST HAVE, The name of the repo you use to store Gitment comments</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">xxx</span> <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">xxx</span> </span><br></pre></td></tr></table></figure>

<p>问题：</p>
<ul>
<li><p>Error：validation failed</p>
<p>修改 next&#x2F;layout&#x2F;_third-party&#x2F;comments&#x2F;gitment.swig中<code>id: window.location.pathname</code>为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id: &#x27;&#123;&#123; page.date &#125;&#125;&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>valine</strong></p>
</li>
<li><p>文章底部增加版权信息</p>
</li>
<li><p>修改文章底部的那个带#号的标签</p>
</li>
</ol>
<p>   修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> </p>
<ol start="9">
<li>修改打赏字体不闪动，next 7.0 已支持配置</li>
</ol>
<p>   修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>， 注释<code>wechat:hover</code> 和<code>alipay:hover</code>， 如下：</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释文字闪动函数</span></span><br><span class="line"><span class="comment"> #wechat:hover p&#123;</span></span><br><span class="line"><span class="comment">    animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> #alipay:hover p&#123;</span></span><br><span class="line"><span class="comment">   animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">    -moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li><p>模块化主题管理（以next主题为例）</p>
</li>
<li><p>备份next主题 <code>mv next next-bak</code>，提交代码</p>
</li>
<li><p><strong>增加子模块</strong> <code>git submodule add git@github.com:silloy/hexo-theme-next.git themes/next</code></p>
</li>
<li><p>查看状态 <code>git status</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   .gitmodules</span><br><span class="line">	new file:   themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> git commit -m <span class="string">&quot;add next module&quot;</span></span></span><br><span class="line">[hexo adbe36e] add next module</span><br><span class="line"> 3 files changed, 19 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更新子模块</strong> <code>git submodule update --remote</code></p>
</li>
<li><p><strong>拉取含子模块的项目</strong>，git clone 后执行以下操作</p>
<ol>
<li><p><code>git submodule init</code> 初始化本地配置文件</p>
</li>
<li><p><code>git submodule update</code> 从该项目中抓取所有数据并检出父项目中列出的合适的提交</p>
<p>也可在 clone 使用 <code>git clone --recursive</code> 命令, git 就会自动初始化并更新仓库中的每一个子模块.</p>
</li>
<li><p>若子分支仓库中有未同步的更新, 可通过 <code>git submodule update --remote --rebase</code> 来同步最新的内容</p>
</li>
</ol>
</li>
<li><p><strong>同步源主题的修改</strong></p>
<ol>
<li><p>增加源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd theme/next</span><br><span class="line">git remote add source  git@github.com:theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull source master</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch source master</span><br><span class="line">git checkout master</span><br><span class="line">git merge source/master</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>发布子模块的修改</strong></p>
<ol>
<li>使用 <code>git push --recurse-submodules=check</code> 命令 检查没有推送的子模块</li>
<li>使用 <code>git push --recurse-submodules=on-demand</code> git 会自动尝试推送变更的子项目</li>
</ol>
</li>
</ol>
<p><strong>参考文章</strong>：</p>
<p><a href="http://theme-next.iissnan.com/">NexT 使用文档</a></p>
<p><a href="https://leaferx.online/2017/06/16/use-gulp-to-minimize/">利用Gulp来压缩你的Hexo博客</a></p>
<p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html">hexo的next主题个性化教程:打造炫酷网站</a></p>
<p><a href="https://gaoyuhao.ga/">老高博客</a></p>
<p><a href="https://github.com/imsun/gitment#methods">gitment</a></p>
<p><a href="http://ihtc.cc/2018/02/25/2018-02-25%20_Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%85%A5%E8%B8%A9%E5%9D%91%E6%95%99%E7%A8%8B/">Gitment评论功能接入踩坑教程</a></p>
<p><a href="https://zetaoyang.github.io/post/2016/07/08/hexo-localsearch.html">实现 Hexo next 主题博客本地站内搜索</a></p>
<p><a href="http://blog.csdn.net/u011475210/article/details/79023429">我的个人博客之旅：从jekyll到hexo</a></p>
<p><a href="https://juejin.im/post/5c2e22fcf265da615d72c596">在 hexo 中使用 git submodules 管理主题</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo同步</title>
    <url>/2016/06/22/hexo%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>简要介绍一下hexo搭建的github page同步过程。</p>
<p>我已经在github上建立了hexo的源码分支hexo，以及主页分支master。<br>过程：</p>
<ul>
<li>准备工作 git(Cygwin)，nodejs(win10)安装</li>
<li>依次执行的命令<ol>
<li>git clone -b hexo <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:silloy&#x2F;silloy.github.io.git hexo</li>
<li>cd hexo</li>
<li>npm install -g hexo-cli</li>
<li>npm install</li>
<li>npm install hexo-deployer-git</li>
<li>npm install -g npm-check</li>
<li>npm-check -u  （npm-check -u -g）</li>
</ol>
</li>
<li>安装其他依赖包<ul>
<li><a href="https://github.com/theme-next/theme-next-canvas-nest">https://github.com/theme-next/theme-next-canvas-nest</a></li>
<li><a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a></li>
<li><a href="https://github.com/theme-next/theme-next-pace">https://github.com/theme-next/theme-next-pace</a></li>
</ul>
</li>
</ul>
<p>参考资料： <a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客？</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ip查询的一些网站</title>
    <url>/2020/06/19/ip%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>ip查询的一些网站</p>
<ul>
<li><a href="http://ip.cn/">ip.cn</a></li>
<li><a href="http://ipinfo.io/">ipinfo.io</a></li>
<li><a href="http://cip.cc/">cip.cc</a></li>
<li><a href="http://ifconfig.me/">ifconfig.me</a></li>
<li><a href="http://myip.ipip.net/">myip.ipip.net</a></li>
</ul>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ curl ipinfo.io</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;27.102.106.127&quot;,</span><br><span class="line">  &quot;city&quot;: &quot;Seoul&quot;,</span><br><span class="line">  &quot;region&quot;: &quot;Seoul&quot;,</span><br><span class="line">  &quot;country&quot;: &quot;KR&quot;,</span><br><span class="line">  &quot;loc&quot;: &quot;37.5660,126.9784&quot;,</span><br><span class="line">  &quot;org&quot;: &quot;AS45996 DAOU TECHNOLOGY&quot;,</span><br><span class="line">  &quot;postal&quot;: &quot;03186&quot;,</span><br><span class="line">  &quot;timezone&quot;: &quot;Asia/Seoul&quot;,</span><br><span class="line">  &quot;readme&quot;: &quot;https://ipinfo.io/missingauth&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">➜  ~ curl ifconfig.me</span><br><span class="line">27.103.116.127</span><br><span class="line"></span><br><span class="line">➜  ~ curl myip.ipip.net</span><br><span class="line">当前 IP：221.226.112.106  来自于：中国 北京 北京  联通</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java浮点型精度丢失浅析</title>
    <url>/2019/11/23/java%E6%B5%AE%E7%82%B9%E5%9E%8B%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<p>java浮点型数值在运算中会出现精度损失的情况，在业务要求比较高比如交易等场景，一般使用BigDecimal来解决精度丢失的情况。最近一个同事在使用BigDecimal时仍然出现了精度损失，简略记录一下</p>
<span id="more"></span>

<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="number">0.56D</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;abc: &quot;</span> + abc);</span><br><span class="line">        System.out.println(<span class="string">&quot;new BigDecimal(abc): &quot;</span> + <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(abc));</span><br><span class="line">        System.out.println(<span class="string">&quot;BigDecimal.valueOf(abc): &quot;</span> + BigDecimal.valueOf(abc));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">abc: 0.56</span><br><span class="line">new BigDecimal(abc): 0.560000000000000053290705182007513940334320068359375</span><br><span class="line">BigDecimal.valueOf(abc): 0.56</span><br></pre></td></tr></table></figure>

<p>可以看到在使用BigDecimal构造器转化浮点型仍然会有损失，而使用<code>valueOf</code>方法则不会出现精度损失。</p>
<h3 id="深入源码"><a href="#深入源码" class="headerlink" title="深入源码"></a>深入源码</h3><p>BigDecimal构造器，核心代码(<code>BigDecimal(double val)</code>)如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BigDecimal</span><span class="params">(<span class="type">double</span> val, MathContext mc)</span> &#123;</span><br><span class="line">  .....</span><br><span class="line">    <span class="type">long</span> <span class="variable">valBits</span> <span class="operator">=</span> Double.doubleToLongBits(val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> ((valBits &gt;&gt; <span class="number">63</span>) == <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">exponent</span> <span class="operator">=</span> (<span class="type">int</span>) ((valBits &gt;&gt; <span class="number">52</span>) &amp; <span class="number">0x7ffL</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">significand</span> <span class="operator">=</span> (exponent == <span class="number">0</span></span><br><span class="line">                      ? (valBits &amp; ((<span class="number">1L</span> &lt;&lt; <span class="number">52</span>) - <span class="number">1</span>)) &lt;&lt; <span class="number">1</span></span><br><span class="line">                      : (valBits &amp; ((<span class="number">1L</span> &lt;&lt; <span class="number">52</span>) - <span class="number">1</span>)) | (<span class="number">1L</span> &lt;&lt; <span class="number">52</span>));</span><br><span class="line">  exponent -= <span class="number">1075</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>划重点， <code>Double.doubleToLongBits</code>返回根据IEEE754浮点“双精度格式”位布局，返回指定浮点值的表示</p>
<p><code>BigDecimal.valueOf</code>核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">valueOf</span><span class="params">(<span class="type">double</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(val));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigDecimal</span><span class="params">(<span class="type">char</span>[] in, <span class="type">int</span> offset, <span class="type">int</span> len, MathContext mc)</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到使用valueOf方法实际上是把double转为String，再调用string构造器的。</p>
<p>那么为什么使用<code>Double.doubleToLongBits</code>会出现精度损失，而使用string构造器不会呢。主要原因是BigDecimal使用<strong>十进制(BigInteger)+小数点(scale)位置</strong>来表示小数，而不是直接使用二进制，如<code>101.001 = 101001 * 0.1^3</code>，运算时会分成两部分，BigInteger间的运算以及小数点位置的更新，这里不再展开。</p>
<h3 id="原理浅析"><a href="#原理浅析" class="headerlink" title="原理浅析"></a>原理浅析</h3><p><code>Double.doubleToLongBits</code>为什么会出现精度损失呢，主要原因是因为浮点型不能用精确的二进制来表述，就如十进制不能准确描述无穷小数一样。</p>
<p>浮点型转化为二进制的算法是乘以2直到没有了小数为止，举个栗子，0.8表示成二进制</p>
<blockquote>
<p> 0.8*2&#x3D;1.6 取整数部分 1</p>
<p> 0.6*2&#x3D;1.2   取整数部分 1</p>
<p> 0.2*2&#x3D;0.4   取整数部分 0</p>
<p> 0.4*2&#x3D;0.8   取整数部分 0</p>
</blockquote>
<p>可以看到上述的计算过程出现循环了，所以说浮点型转化为二进制有时是不可能精确的。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>如果想要把浮点型转化为BigDecimal，尽量选择使用<code>valueOf</code>方法，而不是使用构造器。</p>
<p><strong>References</strong></p>
<p><a href="http://blog.sina.com.cn/s/blog_827d041701017ctm.html">JAVA程序中Float和Double精度丢失问题</a></p>
]]></content>
  </entry>
  <entry>
    <title>redission 序列化问题追踪</title>
    <url>/2019/05/28/redission%20%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>项目原本是用jedis连接redis，但考虑到需要用redis锁，因此替换为方便快捷的<strong>redisson</strong>，但是使用redisson之后会报decode error，具体信息如下：</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">15</span> <span class="number">13</span>:<span class="number">39</span>:<span class="number">59.973</span> [redisson-netty-<span class="number">2</span>-<span class="number">3</span>] ERROR o.r.c.h.CommandDecoder [decodeCommand:<span class="number">203</span>]     - Unable to decode data. channel: [id: <span class="number">0x477c5ced</span>, L:/<span class="number">192.168</span><span class="number">.4</span><span class="number">.94</span>:<span class="number">57423</span> - R:<span class="number">10.10</span><span class="number">.10</span><span class="number">.43</span>/<span class="number">10.10</span><span class="number">.10</span><span class="number">.43</span>:<span class="number">6379</span>], reply: ReplayingDecoderByteBuf(ridx=<span class="number">102</span>, widx=<span class="number">102</span>), command: (GET), params: [Geek:xxxxx:xxxx]</span><br><span class="line">java.io.IOException: java.lang.NullPointerException</span><br><span class="line">	at org.nustaq.serialization.FSTObjectInput.readObject(FSTObjectInput.java:<span class="number">247</span>)</span><br><span class="line">	at org.redisson.codec.FstCodec$<span class="number">1.</span>decode(FstCodec.java:<span class="number">228</span>)</span><br><span class="line">	at org.redisson.client.handler.CommandDecoder.decode(CommandDecoder.java:<span class="number">368</span>)</span><br><span class="line">	at org.redisson.client.handler.CommandDecoder.decodeCommand(CommandDecoder.java:<span class="number">200</span>)</span><br><span class="line">	at org.redisson.client.handler.CommandDecoder.decode(CommandDecoder.java:<span class="number">140</span>)</span><br><span class="line">	at org.redisson.client.handler.CommandDecoder.decode(CommandDecoder.java:<span class="number">115</span>)</span><br><span class="line">	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:<span class="number">502</span>)</span><br><span class="line">	at io.netty.handler.codec.ReplayingDecoder.callDecode(ReplayingDecoder.java:<span class="number">366</span>)</span><br><span class="line">	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:<span class="number">278</span>)</span><br></pre></td></tr></table></figure>



<!-- more -->

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RBucket</span> <span class="variable">ste</span> <span class="operator">=</span> redissonClient.getBucket(<span class="string">&quot;Geek:add:ddd&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">re</span> <span class="operator">=</span> ste.get();</span><br></pre></td></tr></table></figure>

<p>考虑可能是由于序列化产生的问题，查到[NullPointer 3.10.6][NullPointer 3.10.6]，设置codec为<code>StringCodec</code>，即</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redissonClient.getConfig().setCodec(<span class="keyword">new</span> <span class="title class_">StringCodec</span>());</span><br></pre></td></tr></table></figure>

<p>但是并未解决问题，redisson仍然使用默认的<code>FstCodec</code>，通过idea强大的提示功能可以看到 getBucket接受一个codec参数</p>
<p><img src="https://s2.ax1x.com/2019/05/15/ET2i0x.png" alt="idea.png"></p>
<p>修改代码为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RBucket</span> <span class="variable">ste</span> <span class="operator">=</span> redissonClient.getBucket(<span class="string">&quot;Geek:add:ddd&quot;</span>, <span class="keyword">new</span> <span class="title class_">StringCodec</span>());</span><br><span class="line"><span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> ste.get();</span><br></pre></td></tr></table></figure>

<p>完美解决</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>为什么直接设置redisson config 不生效呢，一步步查源码 <code>RedissonObject#RedissonObject</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public RedissonObject(CommandAsyncExecutor commandExecutor, String name) &#123;</span><br><span class="line">        this(commandExecutor.getConnectionManager().getCodec(), commandExecutor, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出redisson 默认从<code>ConnectionManager</code>里获取<code>codec</code>方式，继续看，以 <code>SingleConnectionManager</code> 为例，<code>SingleConnectionManager</code>是<code>MasterSlaveConnectionManager</code>的子类，具体的类图关系</p>
<p><img src="https://s2.ax1x.com/2019/05/15/ET4s1S.png" alt="connectionManage.png"></p>
<p>config.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Config</span><span class="params">(Config oldConf)</span> &#123;</span><br><span class="line">        setExecutor(oldConf.getExecutor());</span><br><span class="line">        <span class="keyword">if</span> (oldConf.getCodec() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// use it by default</span></span><br><span class="line">            oldConf.setCodec(<span class="keyword">new</span> <span class="title class_">FstCodec</span>());</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>即检测到原有codec为空时，则设置为<code>FstCodec</code></p>
<p>看一下 Redisson.java 配置关键部分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">Redisson</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.config = config;</span><br><span class="line">  <span class="type">Config</span> <span class="variable">configCopy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(config);</span><br><span class="line"></span><br><span class="line">  connectionManager = ConfigSupport.createConnectionManager(configCopy);</span><br><span class="line">  evictionScheduler = <span class="keyword">new</span> <span class="title class_">EvictionScheduler</span>(connectionManager.getCommandExecutor());</span><br><span class="line">  writeBehindService = <span class="keyword">new</span> <span class="title class_">WriteBehindService</span>(connectionManager.getCommandExecutor());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RedissonClient <span class="title function_">create</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">  <span class="type">Redisson</span> <span class="variable">redisson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Redisson</span>(config);</span><br><span class="line">  <span class="keyword">if</span> (config.isReferenceEnabled()) &#123;</span><br><span class="line">    redisson.enableRedissonReferenceSupport();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> redisson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出， config是在redisson初始化的时候传入的</p>
<p>因为我用的是<code>redisson-spring-boot-starter</code>，看一下这个starter里面，是如何初始化的，redisson starter 默认使用 spring-data-redis 配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(RedissonClient.class)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       ....</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (redissonProperties.getConfig() != <span class="literal">null</span>) &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            config = <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="string">&quot;redis://&quot;</span>;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(RedisProperties.class, <span class="string">&quot;isSsl&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (method != <span class="literal">null</span> &amp;&amp; (Boolean)ReflectionUtils.invokeMethod(method, redisProperties)) &#123;</span><br><span class="line">                prefix = <span class="string">&quot;rediss://&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            config.useSingleServer()</span><br><span class="line">                .setAddress(prefix + redisProperties.getHost() + <span class="string">&quot;:&quot;</span> + redisProperties.getPort())</span><br><span class="line">                .setConnectTimeout(timeout)</span><br><span class="line">                .setDatabase(redisProperties.getDatabase())</span><br><span class="line">                .setPassword(redisProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">return</span> Redisson.create(config);</span><br></pre></td></tr></table></figure>

<p>回到一开始的问题，直接设置redisson codec为什么不生效？仔细以上分析可以知道，redisson统一设置codec主要是通过初始化的时候传入<strong>ConnectionManager</strong>使 codec生效，而通过 <code>redissonClient.getConfig().setCodec(...)</code>的方式并不能改变<strong>ConnectionManager</strong>中的编码方式。</p>
<p>结论：</p>
<ol>
<li>如果想自定义codec，需要自己初始化redissonClient[调用Redisson.create(config)]， 或者重写redisson-starter</li>
<li>在定制化程度不高时，可直接使用默认codec，或者把特定的codec传入方法体内</li>
</ol>
<p><strong>Reference</strong></p>
<p>[NullPointer 3.10.6]: <a href="https://github.com/redisson/redisson/issues/2032">https://github.com/redisson/redisson/issues/2032</a>	“Issue”</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis底层原理-Strings</title>
    <url>/2019/08/21/redis%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-Strings/</url>
    <content><![CDATA[<p>翻译自 <a href="http://redisplanet.com/redis/under-the-hood-of-redis-strings/">Under the Hood of Redis: Strings</a></p>
<p>你知道简单string <code>strings</code> 在redis里占用了56 bytes的内存吗？</p>
<p>我会试图告诉你为什么，了解redis运行原理时非常重要的。当你试图构建一个高负载的应用显的尤为重要，同时，你很快就会理解你的redis实例为什么会消费大量的内存？</p>
<span id="more"></span>

<p>这篇文章主要介绍以下几个主题：</p>
<ul>
<li>strings 在redis里如何存储</li>
<li>strings 的内部结构是什么样的</li>
<li>redis 使用的优化机制</li>
<li>依据不同场景，如何有效的使用strings或者以此为基础的结构</li>
</ul>
<p>Strings是redis里最常用的数据结构。 HSET&#x2F;ZSET&#x2F;LIST 在内部结构上都会增加一定的开销。过去一年，我在  <a href="http://stackoverflow.com/">stackoverflow</a> 上浏览了大量关于redis的答案， 让我意识到大量的开发者并不理解reids的内存结构以及redis为高速所付出的代价。这是该系列的第一篇文章，讲解redis内部构造。redis数据结构会占用多少内存的问题实际和编译器，CPU以及redis使用的内存分配器相关（redis默认使用jemalloc）。以下的计算依赖64位 centos 上的redis 3.0.5 版本。</p>
<p>对于不编写或者不熟悉C&#x2F;C++的开发者而言，理解可能上不太容易。在此我会简化概念以让你能理解计算过程。在C&#x2F;C++语言里，当你声明unsigned int (4  bytes) 变量，编译器会分配8 bytes内存（64位架构）。jemalloc 内存分配器会优化查找新的内存块的速度，并对齐分配的内存。jemalloc 的内存分配策略运行良好，然而接下来我认为我应该使用简化的概念来描述。你请求24 bytes，分配32。你请求61，分配64。我做了深度的简化，希望你理解的更清楚。</p>
<p>Salvatore Sanfilippo’s (aka antirez）通过一种SDS的结构来解释strings：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+--------+-------------------------------+-----------+</span><br><span class="line">| Header | Binary safe C alike string... | Null term |</span><br><span class="line">+--------+-------------------------------+-----------+</span><br><span class="line">         |</span><br><span class="line">         `-&gt; Pointer returned to the user.</span><br></pre></td></tr></table></figure>

<p>这是一种简单的<code>C</code>结构，header 部分包含string数据部分和末尾0的实际大小和内存占用空间的信息。我们感兴趣的事sds strings header结构的成本，resize策略和内存分配的代价。</p>
<p>2015年7月4号，pull request  <a href="https://github.com/antirez/redis/pull/2509">a long history with the optimization of sds strings</a>, 被引入Redis 3.2，使sds headers部分内存占用大幅度降低（从16%到200%不等）。移除了redis里关于redis string 最大512MB的限制。所有的这些可能性都归功于string长度变化时，header的动态变更。strings长度在256 bytes以下时，header仅占用3 bytes，65kb以下时占用5 bytes，512MB以下时占用9 bytes，uint64_t(64 bit unsigned integer)以下时占用17 bytes。而这种变化可以减少redis server farm 19.3%的内存（～42 GB）。然而，在Redis 3.0.x 中简化为 8 bytes 加 末端零占用的1 byte。让我们评估一下string <code>strings</code>的内存占用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">16 (header) + 7 (string length) + 1(trailing zero) = 24  bytes (16  bytes in the header, because the compiler will align 2 unsigned int for you).</span><br></pre></td></tr></table></figure>

<p>jemalloc 会分配32 bytes。Let’s take as long as it will not be taken into account （我希望你售后能理解为什么）。</p>
<p>当一个字符串大小变化时会引起什么变化？当你增加字符串长度，同时发现已分配的内存不足，redis 会将新长度和常量<code>SDS_MAX_PREALLOC</code>（sds.h中定义，值为1,048,576 bytes）比较。如果新长度比该值小，则会分配两倍的请求大小。如过请求长度大于 <code>SDS_MAX_PREALLOC</code> ，新增加的长度会增加到这个常量上。</p>
<p>这个特性对于主题-bitmaps使用中内存减少 这个问题非常重要。分配的内存通常是需要的两倍，是因为setbit实现的需要（参见 setbit 命令，bitops.c）。</p>
<p>现在你可以说 strings 会占用32 bytes（包括已分配的）。浏览过 hashedin.com (<a href="https://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-Memory-Optimization">redis memory optimization guide</a>) 的读者可能会想起他们被强烈建议不要使用少于100 bytes 的字符串，比如 <code>set foo bar</code> 会占用 ～96 bytes，其中 90 bytes 的开销（64位机器）。讲道理，让我们看一下为什么。</p>
<p>reids里所有的值都被命名为 <code>redisObject</code>， 内部结构如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">+------+----------+-----+----------+-------------------------+</span><br><span class="line">| Type | Encoding | LRU | RefCount | Pointer to  data (ptr*) |</span><br><span class="line">+------+----------+-----+----------+-------------------------+</span><br></pre></td></tr></table></figure>

<p>稍后我们会计算字符串的大小，了解账户编译器和jemalloc特性。了解存储字符串的编码是非常重要的，redis会使用三种不同的存储策略：</p>
<ul>
<li><strong>REDIS_ENCODING_INT</strong>. Strings can be stored in this form, if the value is cast to long value in the range <strong>LONG_MIN</strong>, <strong>LONG_MAX</strong>. For example, the string «dict» it will be stored in the form of this encoding, and will be the number 1952672100 (0x74636964). This encoding is also used for pre-selected range of special values in the range <strong>REDIS_SHARED_INTEGERS</strong> (defined in redis.h and the default is 10000). The values of this range are allocated immediately at the start of Redis.</li>
<li><strong>REDIS_ENCODING_EMBSTR</strong> used for strings with a length up to 39 bytes (the value from constant <strong>REDIS_ENCODING_EMBSTR_SIZE_LIMIT</strong> object.c). This means that redisObject structure and sds string structure are placed in a single area of memory allocated by allocator. With this in mind, we will be able to calculate the correct alignment. However, it is equally important to understand the problem of memory fragmentation in the Redis and how to live with it.</li>
<li><strong>REDIS_ENCODING_RAW</strong> used for all strings whose length exceeds <strong>REDIS_ENCODING_EMBSTR_SIZE_LIMIT</strong>. In this case our ptr * stores a pointer to the memory area with sds string.</li>
</ul>
<p>EMBSTR 在2012年出现，在短字符串方面，带来了大约 60%-70%的性能提升，但目前对内存及其碎片化影响的研究还不多。</p>
<p>7 bytes 的 <code>strings</code> 字符串，使用 EMBSTR 存储结构。构建的存储结构类似这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+--------------+--------------+------------+--------+----+</span><br><span class="line">| robj data... | robj-&gt;ptr    | sds header | string | \0 |</span><br><span class="line">+--------------+-----+--------+------------+--------+----+</span><br><span class="line">                     |                       ^</span><br><span class="line">                     +-----------------------+</span><br></pre></td></tr></table></figure>



<p>现在我们可以再次计算 <code>strings</code> 的内存占用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(4 + 4)* + 8(encoding) + 8 (lru) + 8 (refcount) + 8 (ptr) + 16 (sds header) + 7(strig itself) + 1 (terminating zero) = 56 bytes.</span><br></pre></td></tr></table></figure>

<p><em>The type and value in redisObject uses only the 4 lower and higher bits in the same number, so these two aligned fields will take 8 bytes.</em></p>
<p>让我们检查一下，使用 DEBUG SDSLEN 来debug SDS (<a href="http://redis.io/commands/debug-object">http://redis.io/commands/debug-object</a>) 字符串。这个命令在redis2.6 被加入。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key strings</span><br><span class="line">+OK</span><br><span class="line">debug object key</span><br><span class="line">+Value at:0x7fa037c35dc0 refcount:1 encoding:embstr serializedlength:8 lru:3802212 lru_seconds_idle:14</span><br><span class="line">debug sdslen key</span><br><span class="line">+key_sds_len:3, key_sds_avail:0, val_sds_len:7, val_sds_avail:0</span><br></pre></td></tr></table></figure>

<p>使用EMBSTR编码，字符串长度 7 bytes（有效SDS长度），那么 hashdin.com 的开发者讨论的 96 bytes 又是关于什么呢？在我的理解中，他们犯了一点小错误，<code>set foo bar 需要分配112 bytes内存（value 56 bytes，key 56 bytes）</code>，内存开销 106 bytes。</p>
<p>我承诺会说明使用BITMAP时，节省内存的情况。Redis 2.2 开始出现的 Bit 和 byte 操作 就想一个实时计数的魔法棒，可以节省内存。官方口号是“上亿用户数据，仅占用12M内存“。</p>
<p>理解了redis内存字符串原理，也可以了解bitmap。“是否应该被用于少量数据？”。假设你需要记录一千万人的上网数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit online 10000000 1</span><br><span class="line">:0</span><br><span class="line">debug sdslen online</span><br><span class="line">+key_sds_len:6, key_sds_avail:0, val_sds_len:1250001, val_sds_avail:1048576</span><br></pre></td></tr></table></figure>

<p>你会消费 2,288,577 bytes 内存，对你来说“有用”的部分为 1,250,001 bytes。存储你的一个用户花费 ～2.3 MB，使用 SET 你需要 ～64 bytes（pyaload 为 4 bytes）。使用这种数据结构可以有效减少内存使用量。如果你有10,000～100,000用户，bitmap结构就可以复用内存。</p>
<p>最后，了解一下 字符串 resize，即就是重新分配内存块。内存碎片化是redis的另一个特性，很少有开发者能考虑到这一点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info memory</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">222</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:506920</span><br><span class="line">used_memory_human:495.04K</span><br><span class="line">used_memory_rss:7565312</span><br><span class="line">used_memory_peak:2810024</span><br><span class="line">used_memory_peak_human:2.68M</span><br><span class="line">used_memory_lua:36864</span><br><span class="line">mem_fragmentation_ratio:14.92</span><br><span class="line">mem_allocator:jemalloc-3.6.0</span><br></pre></td></tr></table></figure>

<p><code>mem_fragmentation_ratio</code> 指标显示了系统分配的内存<code>used_memory_rss</code> 和 redis使用内存<code>used_memory</code>的比率。<code>use_memory</code> 和 <code>use_memory_ree</code>包含了数据和redis存储的内部数据结构所占用内存。 Redis RSS (<code>Resident Set Size</code>) - RAM allocated by the operating system, which in addition to the user data (and the costs of their internal representation) accounted for the cost of fragmentation during the physical allocation of the operating system.</p>
<p>如何理解 <code>mem_fragmentation_ratio</code> ？2.1 意思是需要210%的更多内存。小于1则意味着内存被终止，操作系统正在交换内存。</p>
<p>实际中，如果该数字超过 1-1.5边界意味着有地方出错了，尝试以下解决方法：</p>
<ul>
<li>重启redis。redis越长时间不重启，这个值就会越大。</li>
<li>检查一下你计划存储的数据量。比方说，如果你使用32位redis存储多达4GB的数据，那么你应该使用64位redis以扩增rdb。</li>
<li>如果你了解内存分配器的不同点，可以考虑更换内存分配器。</li>
</ul>
<p>其他资料：</p>
<ul>
<li><a href="http://redis.io/topics/memory-optimization">http://redis.io/topics/memory-optimization</a></li>
<li><a href="http://redis.io/topics/internals-sds">http://redis.io/topics/internals-sds</a></li>
<li><a href="http://redislabs.com/blog/redis-ram-ramifications">http://redislabs.com/blog/redis-ram-ramifications</a></li>
<li><a href="http://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-Memory-Optimization">http://github.com/sripathikrishnan/redis-rdb-tools/wiki/Redis-Memory-Optimization</a></li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis的数据类型</title>
    <url>/2020/06/06/redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>简单介绍一下redis的几种数据类型： <strong>Strings</strong>，<strong>Lists</strong>，<strong>Sets</strong>， <strong>Hashe</strong>，<strong>Sorted sets</strong>，<strong>Bitmaps and HyperLogLogs</strong></p>
<span id="more"></span>

<h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><p>Strings是redis的最基础的类型，意味着reds stings可以包含任何数据类型，普通的string，integer…自不必说，JPEG 图片，Java对象，文件等等都可以序列化成strings。</p>
<p>最大限制：512M</p>
<p>常用操作：</p>
<ul>
<li><a href="https://redis.io/commands/incr">INCR</a>, <a href="https://redis.io/commands/decr">DECR</a>, <a href="https://redis.io/commands/incrby">INCRBY</a>：通过strings实现原子化操作</li>
<li><a href="https://redis.io/commands/append">APPEND</a>：改变字符串</li>
<li><a href="https://redis.io/commands/getrange">GETRANGE</a> , <a href="https://redis.io/commands/setrange">SETRANGE</a>： 自由获取或者变更Strings</li>
<li><a href="https://redis.io/commands/getbit">GETBIT</a>, <a href="https://redis.io/commands/setbit">SETBIT</a>：对Strings进行位操作，如通过redis创建一个bloom filter</li>
</ul>
<p>其他： <a href="https://redis.io/commands/#string">available string commands</a> </p>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Redis Lists是strings的集合list，顺序为元素的插入顺序。当然也可以通过命令在head或者tail插入元素。即使list很大，在head或者tail增删元素的速度也很快，但是如果操作中间的元素，则复杂度为O(N)。</p>
<p>lists最大长度： 2^32 - 1 (4294967295， 也就是每个list可以存40亿个元素)</p>
<p>有意思的案例：</p>
<ul>
<li>创建设计网络中的时间线，使用 <a href="https://redis.io/commands/lpush">LPUSH</a> 增加元素，而使用<a href="https://redis.io/commands/lrange">LRANGE</a>获取最新插入的几个元素</li>
<li>使用 <a href="https://redis.io/commands/lpush">LPUSH</a> 和 <a href="https://redis.io/commands/ltrim">LTRIM</a> 创建一个固定容量的list，只记录最新的几个元素</li>
<li>使用list结构创建一个消息队列，如ruby的<a href="https://github.com/resque/resque">Resque</a> - 用于创建后台任务</li>
<li><a href="https://redis.io/commands/blpop">BLPOP</a></li>
</ul>
<p>其他： <a href="https://redis.io/commands#list">available commands operating on lists</a></p>
<h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>Redis Sets是strings的无序无重复集合。增删查的复杂度是0(1)，基于sets可以做 unions, intersections 等操作</p>
<p>sets最大长度： 2^32 - 1 (4294967295， 也就是每个set可以存40亿个元素)</p>
<p>一些案例：</p>
<ul>
<li>trace 一些唯一事件，比如说记录一篇blog的访问ip，仅仅只需要使用  <a href="https://redis.io/commands/sadd">SADD</a> ，而不需要考虑是否重复。</li>
<li>创建一个标签系统，给对象标记不同的tag</li>
<li>使用 <a href="https://redis.io/commands/spop">SPOP</a> 或者 <a href="https://redis.io/commands/srandmember">SRANDMEMBER</a> 命令从一个set中随机抽取元素</li>
<li>其他： <a href="https://redis.io/commands#set">full list of Set commands</a></li>
</ul>
<h3 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h3><p>Redis Hashes 是用来存储一些键值对的，举个栗子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@cli</span><br><span class="line">HMSET user:1000 username antirez password P1pp0 age 34</span><br><span class="line">HGETALL user:1000</span><br><span class="line">HSET user:1000 password 12345</span><br><span class="line">HGETALL user:1000</span><br></pre></td></tr></table></figure>

<p>每一个hash都可以存储至多 2^32 - 1个 键值对</p>
<p>其他： <a href="https://redis.io/commands#hash">full list of Hash commands</a></p>
<h3 id="Sorted-sets"><a href="#Sorted-sets" class="headerlink" title="Sorted sets"></a>Sorted sets</h3><p>redis Sorted Sets 和sets类型相似，但最大的不同点是 Sorted Set 的每一个元素都有一个分值，这个分值可以用作排序，虽然元素是不重复的，但分值可能相同。可以获取不同分值段内的一些元素。</p>
<p>sorted sets 可以做很多有意思的事情，与直接操作数据库相比，有很好的性能</p>
<ul>
<li>比如设计一个在线游戏的选手积分榜，使用<a href="https://redis.io/commands/zadd">ZADD</a>来增加一个新的记录，使用  <a href="https://redis.io/commands/zrange">ZRANGE</a> 获取前几名的选手，也可以使用 <a href="https://redis.io/commands/zrange">ZRANGE</a>来获取一个选手的排名。使用ZRANK 和 ZRANGE可以很快查询到一个元素附近的几个元素</li>
<li>Sorted Sets常常被用来做作redis中的索引数据，比如有很多用户的hash数据，可以使用用户的年龄作为分值，用户id作为值，使用<a href="https://redis.io/commands/zrangebyscore">ZRANGEBYSCORE</a>就可以很快查询出一个年龄区间内的用户</li>
</ul>
<p>其他：<a href="https://redis.io/commands#sorted_set">full list of Sorted Set commands</a></p>
<h3 id="Bitmaps-and-HyperLogLogs"><a href="#Bitmaps-and-HyperLogLogs" class="headerlink" title="Bitmaps and HyperLogLogs"></a>Bitmaps and HyperLogLogs</h3><p>Redis 同时也支持Bitmaps 和 HyperLogLogs，基于Strings实现，但有他们自己的语义。</p>
<p>其他：<a href="https://redis.io/topics/data-types-intro">introduction to Redis data types</a></p>
<p>推荐的redisdocs：</p>
<ul>
<li><a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></li>
<li><a href="http://redisdoc.com/">http://redisdoc.com/</a></li>
</ul>
<p><strong>References</strong></p>
<p><a href="https://redis.io/topics/data-types">Data types</a></p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>sql优化的一般策略</title>
    <url>/2019/08/21/sql%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E8%88%AC%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>sql 优化的一般策略：索引优化，sql改写，参数优化，优化器</p>
<span id="more"></span>

<h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4><p>以<code>select * from vvshop_order.vv_order where receive_phone=&#39;151011324532&#39;;</code>  为例分析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vv_order <span class="keyword">where</span> order_no<span class="operator">=</span><span class="number">23</span>;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202006011431Meh70c52.png" alt="202006011431Meh70c52"></p>
<p>分析：可以看到该sql扫描全表 30 多万记录，可以通过添加索引优化</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vv_order <span class="keyword">add</span> index orderno_idx(order_no);</span><br></pre></td></tr></table></figure>

<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202006011432J7bRPa14.png" alt="202006011432J7bRPa14"></p>
<p><strong>注意点</strong>：</p>
<ul>
<li>当传入的数据类型和库表数据类型不一致时，索引会失效</li>
<li>不要为每个查询字段建立单独的索引，应该根据实际需要建立单列索引或者组合索引</li>
<li>通过explain+extended 检查sql的执行计划，是否使用索引，是否发生隐式转换</li>
<li>避免在查询条件中使用函数</li>
</ul>
<h4 id="sql-改写"><a href="#sql-改写" class="headerlink" title="sql 改写"></a>sql 改写</h4><h5 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a>分页优化</h5><p>原sql <code>select * from buyer where sellerid=100 limit 100000，5000</code>, limit M, N 写法中，M越大，性能越差，可以改写为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.<span class="operator">*</span> <span class="keyword">from</span> buyer t1,</span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> buyer sellerid<span class="operator">=</span><span class="number">100</span> limit <span class="number">100000</span>，<span class="number">5000</span>) t2</span><br><span class="line"><span class="keyword">where</span> t1.id<span class="operator">=</span>t2.id;</span><br></pre></td></tr></table></figure>

<h5 id="子查询优化"><a href="#子查询优化" class="headerlink" title="子查询优化"></a>子查询优化</h5><ol>
<li><p>查询数量较多时，in改为exist，或者优化为如下的形式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees emp,</span><br><span class="line">(<span class="keyword">SELECT</span> emp_no <span class="keyword">FROM</span> salaries_2000 <span class="keyword">WHERE</span> salary <span class="operator">=</span> <span class="number">5000</span>) sal</span><br><span class="line"><span class="keyword">WHERE</span> emp.emp_no <span class="operator">=</span> sal.emp_no;</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免查询返回所有字段，只返回需要的字段数据</p>
</li>
</ol>
<h5 id="不使用-select"><a href="#不使用-select" class="headerlink" title="不使用 select *"></a>不使用 select *</h5><h5 id="or-改写为-in"><a href="#or-改写为-in" class="headerlink" title="or 改写为 in"></a>or 改写为 in</h5><blockquote>
<p>or的效率事n，in的效率是log(n)，控制in数量在200以内</p>
</blockquote>
<h5 id="不使用函数和触发器，通过应用程序实现"><a href="#不使用函数和触发器，通过应用程序实现" class="headerlink" title="不使用函数和触发器，通过应用程序实现"></a>不使用函数和触发器，通过应用程序实现</h5><h5 id="少用join，保证字段类型一直再join或比较"><a href="#少用join，保证字段类型一直再join或比较" class="headerlink" title="少用join，保证字段类型一直再join或比较"></a>少用join，保证字段类型一直再join或比较</h5><h5 id="连续数值-使用-between"><a href="#连续数值-使用-between" class="headerlink" title="连续数值 使用 between"></a>连续数值 使用 between</h5><h4 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h4><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="影响in是否生效的因素"><a href="#影响in是否生效的因素" class="headerlink" title="影响in是否生效的因素"></a>影响in是否生效的因素</h5><ol>
<li><p><code>eq_range_index_dive_limit</code> 参数</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202006011432iMRPw431.png" alt="202006011432iMRPw431"></p>
<p>默认为10</p>
<blockquote>
<p>eq_range_index_dive_limit &#x3D; 0 只能使用index dive</p>
<p>0 &lt; eq_range_index_dive_limit &lt;&#x3D; N 使用index statistics</p>
<p>eq_range_index_dive_limit &gt; N 只能使用index dive</p>
</blockquote>
</li>
</ol>
<h5 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h5><ol>
<li>根据实际使用情况设置字段类型</li>
<li>单表不要有太多字段，建议20以内</li>
<li>避免使用null字段，优化较难且额外占用索引空间</li>
<li>用整型来存IP</li>
</ol>
<h4 id="系统参数调优"><a href="#系统参数调优" class="headerlink" title="系统参数调优"></a>系统参数调优</h4><h5 id="基准测试工具"><a href="#基准测试工具" class="headerlink" title="基准测试工具"></a>基准测试工具</h5><ol>
<li>sysbench：模块化，跨平台以及多线程的性能测试工具</li>
<li>iibench-mysql：基于java的插入性能测试工具</li>
<li>tpcc-mysql：Percona 开发的TPC-C 测试工具</li>
</ol>
<h5 id="这里介绍一些比较重要的参数："><a href="#这里介绍一些比较重要的参数：" class="headerlink" title="这里介绍一些比较重要的参数："></a>这里介绍一些比较重要的参数：</h5><blockquote>
<p>back_log</p>
</blockquote>
<p>backlog值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。也就是说，如果MySql的连接数据达到maxconnections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即backlog，如果等待连接的数量超过backlog，将不被授予连接资源。可以从默认的50升至500</p>
<blockquote>
<p>wait_timeout</p>
</blockquote>
<p>数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的8小时减到半小时</p>
<blockquote>
<p>maxuserconnection</p>
</blockquote>
<p>最大连接数，默认为0无上限，最好设一个合理上限thread_concurrency：并发线程数，设为CPU核数的两倍</p>
<blockquote>
<p>skipnameresolve</p>
</blockquote>
<p>禁止对外部连接进行DNS解析，消除DNS解析时间，但需要所有远程主机用IP访问</p>
<blockquote>
<p>keybuffersize</p>
</blockquote>
<p>索引块的缓存大小，增加会提升索引处理速度，对MyISAM表性能影响最大。对于内存4G左右，可设为256M或384M，通过查询show status like’keyread%’，保证keyreads &#x2F; keyreadrequests在0.1%以下最好</p>
<blockquote>
<p>innodbbufferpool_size</p>
</blockquote>
<p>缓存数据块和索引块，对InnoDB表性能影响最大。通过查询show status like ‘Innodbbufferpoolread%’，保证 (Innodbbufferpoolreadrequests – Innodbbufferpoolreads)&#x2F; Innodbbufferpoolreadrequests 越高越好</p>
<blockquote>
<p>innodbadditionalmempoolsize</p>
</blockquote>
<p>InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL会记录Warning信息到数据库的错误日志中，这时就需要该调整这个参数大小</p>
<blockquote>
<p>innodblogbuffer_size</p>
</blockquote>
<p>InnoDB存储引擎的事务日志所使用的缓冲区，一般来说不建议超过32MB</p>
<blockquote>
<p>querycachesize</p>
</blockquote>
<p>缓存MySQL中的ResultSet，也就是一条SQL语句执行的结果集，所以仅仅只能针对select语句。当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query Cache中的缓存数据失效。所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失。根据命中率(Qcachehits&#x2F;(Qcachehits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB可能已经差不多了，大型的配置型静态数据可适当调大.</p>
<p>可以通过命令show status like ‘Qcache_%’查看目前系统Query catch使用大小</p>
<blockquote>
<p>readbuffersize</p>
</blockquote>
<p>MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能</p>
<blockquote>
<p>sortbuffersize</p>
</blockquote>
<p>MySql执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。如果不能，可以尝试增加sortbuffersize变量的大小</p>
<blockquote>
<p>readrndbuffer_size</p>
</blockquote>
<p>MySql的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</p>
<blockquote>
<p>record_buffer</p>
</blockquote>
<p>每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值</p>
<blockquote>
<p>threadcachesize</p>
</blockquote>
<p>保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的</p>
<blockquote>
<p>table_cache </p>
</blockquote>
<p>类似于threadcachesize，但用来缓存表文件，对InnoDB效果不大，主要用于MyISAM</p>
<p><strong>References</strong></p>
<p><a href="https://yq.aliyun.com/articles/183749">阿里云慢SQL优化挑战大赛分析</a></p>
<p><a href="https://yq.aliyun.com/articles/610128">SQL优化器原理 - 查询优化器综述</a></p>
<p><a href="http://itindex.net/detail/55421-mysql-sql-%E8%AF%AD%E5%8F%A5">MYSQL查询SQL语句性能优化方法</a></p>
<p><a href="https://www.cnblogs.com/TeyGao/p/6585879.html">MySQL–eq_range_index_dive_limit参数学习</a></p>
<p><a href="https://www.cnblogs.com/zhoujinyi/p/4792371.html">MySQL SQL优化之in与range查询【转】</a></p>
<p><a href="https://mp.weixin.qq.com/s/VpMBiAsaxmPCLQMLNJHKWw">MySQL5.7利用虚拟列优化</a></p>
]]></content>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>vm环境安装linuxmint</title>
    <url>/2016/05/14/vm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85linuxmint/</url>
    <content><![CDATA[<p>选择轻量级Linux系统linuxmint搭建需要，做本地测试</p>
<span id="more"></span>

<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul>
<li>linux mint下载：linuxmint-17.3-kde-64bit.iso</li>
<li>vmvare workstation 12 player</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li>安装过程不再叙述，全程傻瓜式安装</li>
</ul>
<h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><ul>
<li>分辨率，壁纸， 语言</li>
</ul>
<h4 id="卸载装机软件"><a href="#卸载装机软件" class="headerlink" title="卸载装机软件"></a>卸载装机软件</h4><ul>
<li>libreoffice<blockquote>
<p><code>sudo apt-get purge libreoffice?</code><br>or <code>sudo aptitude purge libreoffice?</code><br>or <code>sudo apt-get remove --purge libreoffice*</code></p>
</blockquote>
</li>
</ul>
<h4 id="设置软件源，并更新系统"><a href="#设置软件源，并更新系统" class="headerlink" title="设置软件源，并更新系统"></a>设置软件源，并更新系统</h4><ul>
<li>sudo apt-get update</li>
<li>sudo apt-get upgrade</li>
<li>main选择： ustc</li>
<li>base选择： aliyun</li>
</ul>
<h4 id="浏览器主页，搜索引擎设置"><a href="#浏览器主页，搜索引擎设置" class="headerlink" title="浏览器主页，搜索引擎设置"></a>浏览器主页，搜索引擎设置</h4><h4 id="安装GuakeTerminal"><a href="#安装GuakeTerminal" class="headerlink" title="安装GuakeTerminal"></a>安装GuakeTerminal</h4><ul>
<li><code>sudo apt-get install guake</code></li>
<li>docs: <a href="http://www.2cto.com/os/201410/343251.html">GuakeTerminal──linux下完美帅气的终端</a></li>
</ul>
<h4 id="安装VMWARE-tools"><a href="#安装VMWARE-tools" class="headerlink" title="安装VMWARE tools"></a>安装VMWARE tools</h4><h4 id="安装输入法-不适用于linuxmint18"><a href="#安装输入法-不适用于linuxmint18" class="headerlink" title="安装输入法(不适用于linuxmint18)"></a>安装输入法(不适用于linuxmint18)</h4><ul>
<li><code>sudo add-apt-repository ppa:fcitx-team/nightly</code></li>
<li><code>sudo aptitude update</code></li>
<li><code>sudo aptitude install fcitx fcitx-sogoupinyin fcitx-config-gtk fcitx-frontend-all fcitx-module-cloudpinyin fcitx-ui-classic</code></li>
<li>下载sogou for linux , 打开im-config设置fcitx，安装sougou</li>
<li>reboot</li>
<li>配置文件（注意取消only show current language）</li>
</ul>
<h4 id="安装markdown编辑器"><a href="#安装markdown编辑器" class="headerlink" title="安装markdown编辑器"></a>安装markdown编辑器</h4><ul>
<li>推荐 cmd_markdown</li>
</ul>
<h4 id="开发常用软件"><a href="#开发常用软件" class="headerlink" title="开发常用软件"></a>开发常用软件</h4><ul>
<li>docs：<a href="http://www.jianshu.com/p/c5a29e476526">Linux mint</a></li>
</ul>
<h4 id="安装JAVA-jdk"><a href="#安装JAVA-jdk" class="headerlink" title="安装JAVA jdk"></a>安装JAVA jdk</h4><ul>
<li>jre</li>
</ul>
<ol>
<li><code>sudo apt-get install default-jre</code></li>
</ol>
<ul>
<li>open-jdk</li>
</ul>
<ol>
<li><code>sudo apt-get install default-jdk</code></li>
</ol>
<ul>
<li>jdk</li>
</ul>
<ol>
<li><code>sudo add-apt-repository ppa:webupd8team/java</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install oracle-java8-installer</code></li>
<li><code>sudo apt-get install oracle-java8-set-default</code></li>
</ol>
<ul>
<li>docs：<blockquote>
<p><a href="http://www.linuxidc.com/Linux/2014-09/106445.htm">怎样在Ubuntu 14.04中安装Java</a><br><a href="http://my.oschina.net/fhd/blog/335156">Linux下配置Java环境变量</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux-mint</tag>
      </tags>
  </entry>
  <entry>
    <title>window添加sublime右键菜单</title>
    <url>/2016/06/28/window%E6%B7%BB%E5%8A%A0sublime%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<p>1.打开注册表编辑器，开始-&gt;运行-&gt;regedit。</p>
<p>2.在HKEY_CLASSSES_ROOT→ * → Shell 下，在Shell下，新建项命名为Open With Sublime Text，在该新建项的右边窗口新建字符串值（右键–新建–字符串值）。名称：Icon；值：D:\Program Files\Sublime Text 3\sublime_text.exe,0 【注：使用您自己的安装文件目录】。</p>
<p>3.在新建的项Open With Sublime Text下面新建项Command（必须这个名称）.修改Command项右侧窗口的默认值，修改为：”D:\Program Files\Sublime Text 3\sublime_text.exe” “%1”【注：使用您自己的安装文件目录】，双引号一定要加，否则无法打开路径带空格的文件，这样就大功告成了。</p>
]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入理解Java虚拟机》读书笔记</title>
    <url>/2019/09/12/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《深入理解Java虚拟机》是JVM领域的经典之作，刚工作不久就有大佬强烈推荐，无奈基础较差，读的比较慢，之后短短续续读完了。在之后的工作中，偶尔也会拿出来翻一下，对于学习和工作帮助很大。</p>
<span id="more"></span>

<p>JVM是整个虚拟机提醒的底座，是Java的“平台无关性”的基础，了解了JVM才能深入理解到java程序“一次编写，到处运行”的真正原因。同时对于工作中程序性能调优，异常排查有很大的指导意义。</p>
<p>主要的内容包含以下几个方面：</p>
<ul>
<li>走进Java</li>
<li>自动内存管理机制</li>
<li>虚拟机执行子系统</li>
<li>程序编译与代码优化</li>
<li>高效并发</li>
</ul>
<p>作者层层递进，从了解java一致到指导编写高效简洁的程序给了我很多帮助。</p>
<p>走近JAVA</p>
<p>这一部分就不用说了吧，对java技术体系的一个大概介绍。说实话，这是我刚开始读这本书了解最深也是最有印象的一部分，因为其他篇章还读不太懂（逃）。</p>
<p>自动内存管理机制</p>
<p>说实话，很多人喜欢java可能就是因为JVM的自动内存回收机制，因为这一个机制，让我们不用考虑垃圾回收问题，专注于业务代码的编写，但是并不意味着不需要了解JVM的GC机制。程序计数器，堆栈，内存布局……等等对于工作的指导意义很大。刚开始工作的时候写代码比较随意，stackoverflow常有发生，这个时候就需要优化代码，同时调整jvm参数就可以理解。同时像数据库连接池，线程池，等等的配置也和JVM内存有很大的关系。同时这一部分也讲了很多案例，程序的部署策略，集群间的内存异常，堆外内存的溢出错误，JVM进程奔溃，外部命令导致系统缓慢，都有很大的实践意义。刚开始学习netty的时候，遇到了很多堆外内存的溢出错误，也是在实践案例里找到参考，让我顺利的解决了异常。同时这一部分也了解了JConsole的和VisualVM的使用，现在启动新的项目时，一般也会通过VisualVM观察本地的内存占用情况，同时，如有可能也可以通过连接远程来观察服务器上的内存占用情况，优化程序。</p>
<p>虚拟机执行子系统</p>
<p>了解class文件结构，字节码指令，类加载机制等等，实际业务中虽然用的不多，排查问题的时候用过。同时通过了解字节码指令结合javaagent编写一些小的工具，如监控系统等等，对于程序的良好运行都有很大意义。</p>
<p>程序编译与代码优化</p>
<p>了解了Java编译器，可以通过反编译了解代码的执行机制。像泛型，类型擦除，自动装箱、拆箱、与遍历循环，java8的lambda表达式，条件编译等等都可以其实现机制，让我可以编写更好的程序。</p>
<p>高效并发</p>
<p>并发程序的重要性不言而喻，但是如何编写高效的，线程安全的并发程序是一个长久的话题，这一部分从内存模型出发，深入解释了主内存与工作内存，内存交互，特别是线程优化与锁优化讲的很是深入。</p>
<p>总的来水，深入理解Java虚拟机 从底层开始讲起，让我了解了JVM的方方面面，之后的工作学习中也了解了其他的jvm技术，但基本都能在这本书中找到出处，让我受益良多。同时也期待第三版出版，让我有更大的收获。</p>
]]></content>
  </entry>
  <entry>
    <title>使用Linux命令查看硬件信息</title>
    <url>/2016/07/20/%E4%BD%BF%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>在linux检查和查看硬件信息有分很多命令，这里列出一些命令快速查看linux的cpu和内存等信息。</p>
<span id="more"></span>

<h4 id="lscpu"><a href="#lscpu" class="headerlink" title="lscpu"></a>lscpu</h4><blockquote>
<p>直接使用即可，没有多余的选项和功能</p>
</blockquote>
<p><img src="http://s3.51cto.com/wyfs02/M01/79/26/wKioL1aKKrSCJby_AAI8_6qrUIM167.jpg-s_4117306760.jpg" alt="lscpu"></p>
<h4 id="lspci"><a href="#lspci" class="headerlink" title="lspci"></a>lspci</h4><blockquote>
<p>可以列出所有连接到PCI总线的详细信息，例如：显卡，网卡，USB接口及SATA控制器等设备。</p>
</blockquote>
<p><img src="http://s4.51cto.com/wyfs02/M02/79/28/wKiom1aKKpDhH1sxAAStC5wze8s439.jpg-s_281774679.jpg" alt="lspci"><br>​     </p>
<blockquote>
<p>可以使用类似如下命令过滤出特定的设备信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lspci -v | grep &quot;VGA&quot; -A 12 </span><br></pre></td></tr></table></figure>

<p><img src="http://s3.51cto.com/wyfs02/M02/79/26/wKioL1aKKrWTqCqyAALHHCOHEfE161.jpg-s_312483012.jpg" alt="lspci -v"></p>
<h4 id="lshw"><a href="#lshw" class="headerlink" title="lshw"></a>lshw</h4><blockquote>
<p>通用工具，可以执行多个硬件如CPU，硬件，USB控制器及磁盘等详细信息。在执行之后会自动提取不同”&#x2F;proc”文件中的信息。</p>
</blockquote>
<p><img src="http://s3.51cto.com/wyfs02/M00/79/28/wKiom1aKKpGxhBUmAAQM7upzkak684.jpg-s_4216048.jpg" alt="lshm"></p>
<h4 id="lsusb"><a href="#lsusb" class="headerlink" title="lsusb"></a>lsusb</h4><blockquote>
<p>显示连接到此计算机的USB控制器的详细信息，可以使用-v选项来输出每个usb端口的详细信息。</p>
</blockquote>
<p><img src="http://s1.51cto.com/wyfs02/M00/79/26/wKioL1aKKriyjHmiAAIpnCpeKHo610.jpg-s_1499982087.jpg" alt="lsusb"></p>
<h4 id="lnxi"><a href="#lnxi" class="headerlink" title="lnxi"></a>lnxi</h4><blockquote>
<p>用来获取多项目硬件信息的脚本工具，可以为用户输入一个详细的硬件报告，默认未安装在ubuntu系统当中，可以使用如下命令安装： <code>sudo apt-get install inxi </code><br>使用 <code>inxi -Fx</code> 输出硬件报告</p>
</blockquote>
<p><img src="http://s1.51cto.com/wyfs02/M01/79/28/wKiom1aKKpSjbhLcAAS78cVW3XE252.jpg-s_3500452332.jpg" alt="lnxi"></p>
<h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><blockquote>
<p>输出当前Linux系统中个各种分区及其挂载点，可以使用-H参数<br><code>df -H</code></p>
</blockquote>
<p><img src="http://s3.51cto.com/wyfs02/M01/79/28/wKiom1aKKpTQhNhmAAFTK1FKyU4499.jpg-s_1456998239.jpg" alt="df"></p>
<h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><blockquote>
<p>查看当前系统的内存信息<br><code>free -m</code></p>
</blockquote>
<p><img src="http://s3.51cto.com/wyfs02/M02/79/26/wKioL1aKKrnRL10pAADkoB1CGrA170.jpg-s_4179713956.jpg" alt="free"></p>
<h4 id="dmidecode"><a href="#dmidecode" class="headerlink" title="dmidecode"></a>dmidecode</h4><blockquote>
<p>主要通过读取DMI表中数据来提取硬件信息。<br>查看CPU信息<code>sudo dmidecode -t processor </code></p>
</blockquote>
<p><img src="http://s3.51cto.com/wyfs02/M01/79/26/wKioL1aKKrmyEVdzAAOobhhPZYA272.jpg-s_473852599.jpg" alt="dmidecodeCPU"></p>
<blockquote>
<p>查看内存信息<code>sudo dmidecode -t memory </code></p>
</blockquote>
<p><img src="http://s1.51cto.com/wyfs02/M02/79/28/wKiom1aKKpTS1nSrAANCHj_cjjc379.jpg-s_3802672851.jpg" alt="dmidecodeMem"></p>
<blockquote>
<p>查看BIOS信息 <code>sudo dmidecode -t bios </code></p>
</blockquote>
<p><img src="http://s1.51cto.com/wyfs02/M00/79/26/wKioL1aKKrmRu65NAANAzXQhf0k921.jpg-s_1728054736.jpg" alt="dmidecodeBIOS"></p>
<h4 id="hdparm"><a href="#hdparm" class="headerlink" title="hdparm"></a>hdparm</h4><blockquote>
<p>读取SATA设备（eg.硬盘）的相关信息<br>sudo hdparm</p>
</blockquote>
<p><img src="http://s5.51cto.com/wyfs02/M00/79/28/wKiom1aKKpXj2PXqAAIRBgzXTY0260.jpg-s_1492070872.jpg" alt="hdparm"></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用RabbitMQ实现AMQP和MQTT的协议转换</title>
    <url>/2018/04/13/%E4%BD%BF%E7%94%A8RabbitMQ%E5%AE%9E%E7%8E%B0AMQP%E5%92%8CMQTT%E7%9A%84%E5%8D%8F%E8%AE%AE%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>基于LBS的业务系统，前台使用MQTT协议推送到后台，后台通过RabbitMQ实现协议的转换，以实现负载消费的功能。主要的框架如图</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251723gCtQXm41.png" alt="202005251723gCtQXm41"></p>
<span id="more"></span>

<p>准备工作：rabbitmq安装以及 rabbitmq_mqtt 插件启用</p>
<p>MQTT client向<code>/drivers/1</code>push消息，AMQP client 使用 topic 模式接受消息， exchange name为固定值 <code>amq.topic</code>，routingKey 为 MQTT 发送使用的Topic，注意<code>/</code>需要替换为<code>.</code>，queue name 可以任意指定，绑定相同queue的customer可以实现负载消费的功能。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251724eLMByg24.png" alt="202005251724eLMByg24"></p>
<p>Demo示例(以java为例)：</p>
<p>RabbitConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;location.broker&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    TopicExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;amq.topic&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//綁定队列 queueMessages() 到 topicExchange 交换机,路由键只接受完全匹配 topic.message 的队列接受者可以收到消息, # 为通配符模式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeMessage</span><span class="params">(Queue queueMessage, TopicExchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueMessage).to(exchange).with(<span class="string">&#x27;.drivers.#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>RabbitListener:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;location.broker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicReciver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">byte</span>[] hello)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(hello));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用java模拟的mqtt client 发送的消息为byte[]， 因此需要使用<code>byte[]</code>接收消息内容。</p>
<p><strong>References</strong></p>
<ul>
<li><a href="https://blogs.sap.com/2016/02/21/uniting-amqp-and-mqtt-message-brokering-with-rabbitmq/">Uniting AMQP and MQTT Message Brokering with RabbitMQ</a></li>
<li><a href="https://my.oschina.net/u/1047640/blog/819418">使用rabbitmq做为mqtt服务器，整合spring做推送后台</a></li>
</ul>
]]></content>
      <tags>
        <tag>amqp</tag>
        <tag>mqtt</tag>
      </tags>
  </entry>
  <entry>
    <title>全局唯一id方案</title>
    <url>/2019/05/10/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80id%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<ol>
<li><p>mysql自增</p>
<p>优点：简单</p>
<p>缺点：扩容复杂，业务增大时数据迁移困难</p>
</li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>基于时间戳和随机字符串</p>
<p>优点：对人比较友好</p>
<p>缺点：随机数生成不易控制</p>
</li>
<li><p>UUID</p>
<p>优点：简单粗暴，性能好，全球唯一，基本不会有性能问题</p>
<p>缺点：占用空间大，无序，查询效率低</p>
<p>变种：COMB算法</p>
</li>
<li><p>redis自增</p>
<p>优点：简单，易实现，数字ID天然有序</p>
<p>缺点：依赖redis，考验redis性能</p>
</li>
<li><p>Twitter-Snowflake算法</p>
<p>优点：</p>
<ul>
<li>不依赖数据库，性能高，单机有序</li>
<li>灵活，支持多节点部署</li>
</ul>
<p>缺点：</p>
<ul>
<li>无法做到全局递增</li>
</ul>
</li>
<li><p>微信id生成算法</p>
<p><a href="https://cloud.tencent.com/developer/article/1004444">万亿级调用下的优雅：微信序列号生成器架构设计及演变</a></p>
<ul>
<li>类似于批量生成多个id，性能好，避免每次访问库的压力</li>
<li>可能会有单点故障，服务重启ID不连续</li>
</ul>
</li>
<li><p>百度 - <a href="https://github.com/baidu/uid-generator">UidGenerator</a></p>
<ul>
<li>雪花算法变种</li>
</ul>
</li>
<li><p><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf——美团点评分布式ID生成系统- 美团技术团队</a></p>
</li>
<li><p><a href="https://github.com/edwingeng/wuid">wuid</a> — <a href="https://segmentfault.com/a/1190000013020960">一个比 UUID 快百倍的唯一 ID 生成器</a></p>
</li>
<li><p><a href="https://github.com/cloudatee/vesta-id-generator">vesta</a></p>
</li>
<li><p>MongoDB —  ObjectId</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>发布构件到Maven中央仓库</title>
    <url>/2018/06/19/%E5%8F%91%E5%B8%83%E6%9E%84%E4%BB%B6%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>总结的工具包为使用方便决定发布到maven中央仓库，因为第一次发布，遇到很多问题，简要记录一下。</p>
<span id="more"></span>

<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251726ZCikGa28.png" alt="202005251726ZCikGa28"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Sonatype官网：http://www.sonatype.org/</span><br></pre></td></tr></table></figure>

<!--more-->

<p>Step 1: 注册Sonatype用户</p>
<blockquote>
<p>注册地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a> </p>
<p>oss地址：<a href="https://oss.sonatype.org/">https://oss.sonatype.org</a> ，用于查询构件</p>
</blockquote>
<p>Step2: 创建issue</p>
<ol>
<li><p>create issue:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Project：Community Support - Open Source Project Repository Hosting (OSSRH)</span><br><span class="line">Issue Type: new Project</span><br><span class="line">--- next ---</span><br><span class="line">Summary:   &lt;简要项目介绍&gt;</span><br><span class="line">Group id: me.silloy &lt;需要时自己的域名，同时在工程中使用&gt;</span><br></pre></td></tr></table></figure>

<p>点击create，创建issue</p>
</li>
<li><p>下图查看已创建的issue</p>
<p><img src="/images/1529386058988.png" alt="1529386058988"></p>
</li>
</ol>
<p>Step 3: 等待issue审批通过</p>
<blockquote>
<p>一般需要1-2天，审批通过后会收到邮件通知，在自己提交的issue下面可以看到Sonatype工作人员的回复。同时issue状态修改为resolved。</p>
</blockquote>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/2020052517276rhkNd18.png" alt="2020052517276rhkNd18"></p>
<p>Step 4: 发布准备</p>
<ol>
<li><p>生成gpg密钥，并发布到PGP密钥服务器，见引用</p>
<p><strong>简要介绍win10环境下gpg密钥生成方法</strong></p>
<ul>
<li><p>下载Gpg4win， 安装</p>
</li>
<li><p>依次执行一下命令</p>
<blockquote>
<p>版本检查: <code>gpg --version</code>, 我用的是2.2.8</p>
<p>生成key： <code>gpg --gen-key</code></p>
<p>检查本地key： gpg –list-keys</p>
<p>发布公钥：gpg –keyserver hkp:&#x2F;&#x2F;pool.sks-keyservers.net –send-keys A3434534534</p>
<p>校验是否发布成功：gpg –keyserver hkp:&#x2F;&#x2F;pool.sks-keyservers.net –recv-keys 732796B4</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">List all available gpg servers:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gpg-connect-agent --dirmngr <span class="string">&#x27;keyserver --hosttable&#x27;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改maven设置</p>
<ul>
<li><p>修改maven全局配置文件setting.xml， 增加一下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>Harvey.Su<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>&lt;![CDATA[password]]&gt;<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改pom文件，加入需要的信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.silloy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zjtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>a java tool package<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>sushaohua<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>sshzh90@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:git@github.com:silloy/zjtools.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:git@github.com:silloy/zjtools.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>git@github.com:silloy/zjtools.git<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>增加一个名为oss的profile (⭐⭐⭐⭐⭐)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerVersion</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">compilerVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-source-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">additionalOption</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- profiles --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>[1.8,)<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;properties&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/properties&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;finalName&gt;$&#123;project.artifactId&#125;-$&#123;project.version&#125;-SNAPSHOT&lt;/finalName&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- GPG --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-gpg-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>javadoc 不规范的情况下，可以把maven-javadoc-plugin注释掉。</p>
<p><strong>特别注意</strong>：snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。这里我们都设置为oss。</p>
</li>
</ul>
</li>
</ol>
<p>Step 5:  上传构件到OSS</p>
<p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean deploy -P sonar -Darguments=&quot;gpg.passphrase=密钥密码&quot;</span><br></pre></td></tr></table></figure>

<p>看到如下提示信息，说明deploy成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.jar</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.jar (34 kB at 966 B/s)</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.pom</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.pom (9.7 kB at 985 B/s)</span><br><span class="line">Downloading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/maven-metadata.xml</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/maven-metadata.xml</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/maven-metadata.xml (296 B at 5 B/s)</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1-sources.jar</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1-sources.jar (20 kB at 1.9 kB/s)</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1-sources.jar</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1-sources.jar (20 kB at 10 kB/s)</span><br></pre></td></tr></table></figure>

<p>Step 6: 在OSS中发布构件</p>
<blockquote>
<p>登录<a href="https://oss.sonatype.org,可以在`staging/">https://oss.sonatype.org，可以在`Staging</a> Repositories&#96;中查看到已上传的构件，可进行模糊查询，快速定位到自己的构件，状态为open，勾选，然后点击close按钮，接下来系统会自动验证该构件是否满足指定要求，当验证完毕后，状态会变为 Closed，最后，点击 Release 按钮来发布该构件 。</p>
<p>备注：切记是要发布release版本的构件，不能是snapshot，不然不会出现在Staging Repositories里面。 </p>
</blockquote>
<p>Step 7: 通知 Sonatype“构件已成功发布”</p>
<blockquote>
<p>需要在曾经创建的 Issue 下面回复一条“构件已成功发布”的评论，这是为了通知 Sonatype 的工作人员为需要发布的构件做审批( I released the component has been successfully, please approval, thank you!)，发布后会关闭该 Issue 。</p>
</blockquote>
<p>Step 8: 等待审批，1~2天，审批通过后会收到邮件通知。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251729KHR9C746.png" alt="202005251729KHR9C746"></p>
<p>Step 9: 在<a href="https://oss.sonatype.org/#stagingRepositories%E6%89%BE%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9E%84%E5%BB%BA%EF%BC%8C%E7%82%B9%E5%87%BBrelease">https://oss.sonatype.org/#stagingRepositories找到自己的构建，点击release</a></p>
<p>Step 9: 从中央仓库搜索自己发布的构件</p>
<blockquote>
<p>地址：<a href="http://search.maven.org/">http://search.maven.org/</a> </p>
</blockquote>
<p>Step 10: <a href="http://search.maven.org/">http://search.maven.org/</a> 上搜索自己的构件 ，大功告成，可以在项目中引用啦。以后发布就简单了，不需要每次都审核。</p>
<p>问题：</p>
<ol>
<li><p>gpg错误处理<code>Enter passphrase: gpg: gpg-agent is not available in this session</code></p>
<p>可能是版本问题，或者没有安装gpg-agent，详见<a href="https://askubuntu.com/questions/860370/gpg-agent-cant-be-reached">https://askubuntu.com/questions/860370/gpg-agent-cant-be-reached</a> ，具体步骤</p>
<ol>
<li>linux 系统解决方案</li>
</ol>
<ul>
<li><p>安装gpg2  <code>sudo apt install gpgv2</code></p>
</li>
<li><p>然后在maven的settings.xml中加入两个属性，主要要在激活的profile里面 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg2<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.useagent</span>&gt;</span>true<span class="tag">&lt;/<span class="name">gpg.useagent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>mvn clean deploy -P oss</code>， 参看 <a href="https://stackoverflow.com/questions/14114528/avoid-gpg-signing-prompt-when-using-maven-release-plugin">Avoid gpg signing prompt when using Maven release plugin</a></p>
</li>
</ul>
<ol start="2">
<li><p>windows 解决方案 (Windows下Gpg4win、Git、ssh-pageant配置)[<a href="https://www.mjollnir.cc/archives/216.html]">https://www.mjollnir.cc/archives/216.html]</a></p>
<p>.git&#x2F;config修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[gpg]</span><br><span class="line">	program = gpg</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project zjtools: Failed to deploy artifacts: Could not transfer artifact me.silloy:zjtools:jar:0.0.1 from&#x2F;to oss (<a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/">https://oss.sonatype.org/service/local/staging/deploy/maven2/</a>): Access denied to: <a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.jar">https://oss.sonatype.org/service/local/staging/deploy/maven2/me/silloy/zjtools/0.0.1/zjtools-0.0.1.jar</a>, ReasonPhrase: Forbidden. -&gt; [Help 1]</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251728pKbJHK34.png" alt="202005251728pKbJHK34"></p>
<p>答案：<a href="https://www.oschina.net/question/1444646_2277979">引用</a>，提交给sonatype就可以，工作人员会开权限</p>
</li>
<li><p>可以在 <a href="http://search.maven.org/">http://search.maven.org/</a>  搜索到，但是不能在 <a href="http://mvnrepository.com/">http://mvnrepository.com/</a> 搜索到，是因为更新频率不一样，等一天左右就好了，参见工作人员回复</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251730qHwuke25.png" alt="202005251730qHwuke25"></p>
</li>
<li><p><code>gpg --list-keys</code> 出现 unknown 解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --edit-key user@useremail.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">trust</span></span><br><span class="line"></span><br><span class="line">Please decide how far you trust this user to correctly verify other users&#x27; keys</span><br><span class="line">(by looking at passports, checking fingerprints from different sources, etc.)</span><br><span class="line"></span><br><span class="line">  1 = I don&#x27;t know or won&#x27;t say</span><br><span class="line">  2 = I do NOT trust</span><br><span class="line">  3 = I trust marginally</span><br><span class="line">  4 = I trust fully</span><br><span class="line">  5 = I trust ultimately</span><br><span class="line">  m = back to the main menu</span><br><span class="line"></span><br><span class="line">Your decision? 5</span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">save</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>References</p>
<p><a href="https://skyao.gitbooks.io/learning-maven/content/publish/central/">发布到中央仓库</a></p>
<p><a href="https://my.oschina.net/u/2335754/blog/476676">上传自己的构件(Jar)到Maven中央仓库</a></p>
<p><a href="https://my.oschina.net/huangyong/blog/226738">将 Smart 构件发布到 Maven 中央仓库</a></p>
<p><a href="https://www.cnblogs.com/fengpingfan/p/5197608.html">Maven-008-Nexus 私服部署发布报错 Failed to deploy artifacts: Failed to transfer file: … Return code is: 4XX, ReasonPhrase: … 解决方案</a></p>
<p><a href="https://stackoverflow.com/questions/24830610/why-am-i-getting-a-401-unauthorized-error-in-maven">Why am I getting a “401 Unauthorized” error in Maven?</a></p>
<p><a href="http://brianway.github.io/2017/05/17/release-to-maven-central-repo/">将项目发布到 Maven 中央仓库踩过的坑</a></p>
<p>[[gpg —list-keys command outputs uid <a href="https://unix.stackexchange.com/questions/407062/gpg-list-keys-command-outputs-uid-unknown-after-importing-private-key-onto/407070"> unknown ] after importing private key onto a clean install</a></p>
]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>开启Spring Initializr个性化之旅</title>
    <url>/2020/06/18/%E5%BC%80%E5%90%AFSpring%20Initializr%E4%B8%AA%E6%80%A7%E5%8C%96%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<blockquote>
<p>Every good Spring Boot project usually starts at <a href="https://start.spring.io/">https://start.spring.io/</a></p>
<p>— <a href="https://medium.com/u/a17df5ec14a4?source=post_page-----2439ecabb069----------------------">Josh Long</a> </p>
</blockquote>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202006201751FnpKSR11.png" alt="202006201751FnpKSR11"></p>
<span id="more"></span>

<p>背景介绍，自己的项目或者公司的项目一般需要维护很多定制化的模块时，都是上传到maven私服中方便使用，但存在一个问题，每次需要相关的package需要去翻文档或者看bom，不能在建项目的时间直接引入，参考了start.spring.io，尝试搭建自己的spring initializr服务，同时整合自己的一些package，提供个性化服务，快速开发。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/20200624/18077Y13ii51.jpg" alt="18077Y13ii51"></p>
<ul>
<li><a href="https://github.com/spring-io/initializr">Spring Initializr</a> 提供核心REST API，可以整合到UI或者IDE（如Intellij IDEA），直接生成项目</li>
<li><a href="https://github.com/spring-io/start.spring.io">https://start.spring.io</a>  提供web界面，强依赖于 Spring Initializr，显示数据来源于 Spring Properties，定制化主要是使用 Spring Initializr 提供的SPI</li>
<li>除此之外，Spring.io 提供  <a href="https://spring.io/project_metadata/spring-boot">Spring Boot metadata endpoint</a>，Spring Initializr  会使用metadata作为外部数据源，以确保生成的Spring Boot版本是最新的</li>
</ul>
<h3 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h3><p> <a href="https://start.spring.io/">https://start.spring.io/</a> 虽然已经提供了非常优秀的Spring Boot Start，但在某些场景下，仍然需要做一些定制化，比如：</p>
<ol>
<li>由于网络限制，需要搭建一个自己的实例</li>
<li>定制化自己的UI界面</li>
<li>提供一些自己的配置或依赖，如公司内部的starter</li>
</ol>
<p>Spring Initializr 是一个使用Spring Boot搭建的模块化应用，所以还是很容易扩展的</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>由于官方<a href="https://github.com/spring-io/initializr">Spring Initializr</a>以及提供了bom，所以我们直接基于最新的bom版本搭建即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.initializr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>initializr-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>两个组件</p>
<ul>
<li><p><a href="https://github.com/spring-io/initializr">https://github.com/spring-io/initializr</a></p>
</li>
<li><p><a href="https://github.com/spring-io/start.spring.io">https://github.com/spring-io/start.spring.io</a></p>
</li>
</ul>
<p>initializr 是必须的，ui界面是可选的。</p>
<h2 id="个性化-1"><a href="#个性化-1" class="headerlink" title="个性化"></a>个性化</h2><h4 id="定制配置文件"><a href="#定制配置文件" class="headerlink" title="定制配置文件"></a>定制配置文件</h4><p>可以基于 <a href="https://github.com/spring-io/initializr/blob/04b2777b32db38c485119a1f5b0d9c736584f485/initializr-metadata/src/main/java/io/spring/initializr/metadata/InitializrProperties.java">InitializrProperties</a> 定义 application.yml，产出核心依赖。Spring Initializr 也允许我们使用 InitializrMetadataProvider 定义metadata，因此，我们可以创建一个 CustomInitializrProperties 类 来读取不同配置文件的配置项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CustomInitializrProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInitializrConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DefaultInitializrMetadataProvider <span class="title function_">customInitializrMetadataProvider</span><span class="params">(InitializrProperties initializrProperties,</span></span><br><span class="line"><span class="params">      CustomInitializrProperties customInitializrProperties,</span></span><br><span class="line"><span class="params">      InitializrMetadataUpdateStrategy initializrMetadataUpdateStrategy)</span> &#123;</span><br><span class="line">    <span class="type">InitializrMetadata</span> <span class="variable">meta</span> <span class="operator">=</span> InitializrMetadataBuilder.fromInitializrProperties(customInitializrProperties.getInitializr())</span><br><span class="line">        .withInitializrProperties(initializrProperties, <span class="literal">true</span>).build();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultInitializrMetadataProvider</span>(meta, initializrMetadataUpdateStrategy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;custom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInitializrProperties</span> &#123;</span><br><span class="line">  <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">  <span class="type">InitializrProperties</span> <span class="variable">initializr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitializrProperties</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置是通过 <a href="https://github.com/maverick1601/start.spring.io/blob/7bd9ae6435ef6a7eac8b0c444436aeca151117a9/start-site/src/main/java/io/spring/start/site/StartApplication.java#L44">StartApplication</a> 来加载的，但由于应用并没有使用组件扫描，我们需要在配置文件里进行自定义设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">initializr:</span></span><br><span class="line">    <span class="attr">dependencies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Custom</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Custom</span> <span class="string">dependency</span></span><br><span class="line">            <span class="attr">id:</span> <span class="string">custom-dependency</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">your.domain</span></span><br><span class="line">            <span class="attr">artifactId:</span> <span class="string">custom-artifact</span></span><br><span class="line">            <span class="attr">starter:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">custom</span> <span class="string">dependency</span> <span class="string">for</span> <span class="string">the</span> <span class="string">Spring</span> <span class="string">Initializr</span></span><br></pre></td></tr></table></figure>

<p>通过这种自定义的依赖配置，我们就可以控制配置项的合并和显示顺序。</p>
<h4 id="Initializr扩展"><a href="#Initializr扩展" class="headerlink" title="Initializr扩展"></a>Initializr扩展</h4><p>通过配置文件自定义依赖，并不是总能满足我们的需求，有时候我们还需要自定义一些代码片段，这个时候就需要使用 Spring Initializr  提供的一些扩展钩子：</p>
<ul>
<li><strong>BuildCustomizer</strong>：定义Maven&#x2F;Gradle构建过程，如增加maven build插件</li>
<li><strong>ProjectContributor</strong>：定义一些个性化的项目目录或者文件</li>
<li><strong>MainSourceCodeCustomizer, MainCompilationUnitCustomizer, MainApplicationTypeCustomizer,  TestSourceCodeCustomizer,  TestApplicationTypeCustomizer</strong>：项目的源码生成或修改，而不局限于项目语言</li>
<li><strong>GitIgnoreCustomizer</strong>：定义gitignore文件</li>
<li><strong>HelpDocumentCustomizer</strong>：定义 HELP.md文件</li>
<li><strong>ProjectDescriptionCustomizer</strong>：通常用于适应项目描述，例如自动解决框架版本和语言级别的无效组合。</li>
</ul>
<p>举例，如果我们需要在生成项目中增加maven插件，则需要使用一种所谓的“伪”依赖（ <em>pseudo dependency</em>）。首先我们需要定义一个像这样的依赖：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">initializr:</span></span><br><span class="line">    <span class="attr">dependencies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Custom</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Custom</span> <span class="string">Maven</span> <span class="string">Plugin</span></span><br><span class="line">            <span class="attr">id:</span> <span class="string">custom-maven-plugin</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">your.domain</span></span><br><span class="line">            <span class="attr">artifactId:</span> <span class="string">custom-maven-plugin</span></span><br><span class="line">            <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">            <span class="attr">starter:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">Configures</span> <span class="string">custom</span> <span class="string">Maven</span> <span class="string">plugin</span> <span class="string">integration</span> <span class="string">for</span> <span class="string">project</span> <span class="string">scans</span></span><br></pre></td></tr></table></figure>

<p>接着，我们定义两个 BuildCustomizer：一个用来增加maven依赖插件，一个用来移除插件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ProjectGenerationConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnRequestedDependency(&quot;custom-maven-plugin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMavenPluginConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> BuildCustomizer&lt;MavenBuild&gt; <span class="title function_">customPluginConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (MavenBuild build) -&gt; &#123;</span><br><span class="line">      build.dependencies().ids().filter(it -&gt; it.equals(<span class="string">&quot;custom-maven-plugin&quot;</span>))</span><br><span class="line">          .findFirst()</span><br><span class="line">          .map(r -&gt; build.dependencies().get(r)).map(r -&gt; &#123;</span><br><span class="line">        build.plugins().add(r.getGroupId(), r.getArtifactId(),</span><br><span class="line">            (plugin) -&gt; plugin.execution(<span class="string">&quot;my-execution&quot;</span>,</span><br><span class="line">                (first) -&gt; first.goal(<span class="string">&quot;scan&quot;</span>).configuration((conf) -&gt; &#123;conf.add(<span class="string">&quot;failOnSeverity&quot;</span>, <span class="string">&quot;MAJOR&quot;</span>);&#125;)</span><br><span class="line">            ));</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">      &#125;).orElse(build);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> BuildCustomizer&lt;MavenBuild&gt; <span class="title function_">customPluginDependencyRemoval</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> build -&gt; build.dependencies().remove(<span class="string">&quot;custom-maven-plugin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意使用注解，Spring Initializr 自身并不会使用这些自动化配置，而是在生成项目时使用的，但需要<code>spring.factories</code>注册这些配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">io.spring.initializr.generator.project.ProjectGenerationConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  io.spring.start.site.extension.StartProjectGenerationConfiguration, \</span></span><br><span class="line"><span class="string">  io.spring.start.site.CustomMavenPluginConfiguration</span></span><br></pre></td></tr></table></figure>

<p>最终产生的pom类似这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>your.domain<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>custom-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-execution<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>scan<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">failOnSeverity</span>&gt;</span>MAJOR<span class="tag">&lt;/<span class="name">failOnSeverity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>抛砖引玉，这篇文章只是简单介绍了Spring Initializr的一些定制化方法，更多更好的扩展方式还需要你去发现。</p>
<p>git地址：<a href="https://github.com/silloy/start.silloy.me">https://github.com/silloy/start.silloy.me</a></p>
<p><strong>References</strong></p>
<ul>
<li><a href="https://docs.spring.io/initializr/docs/current-SNAPSHOT/reference/html">https://docs.spring.io/initializr/docs/current-SNAPSHOT/reference/html</a></li>
<li><a href="https://yq.aliyun.com/articles/752200">start.aliyun.com 正式上线</a></li>
<li><a href="https://medium.com/digitalfrontiers/how-to-customize-the-spring-initializr-2439ecabb069">How to customize the Spring Initializr</a></li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Initializr</tag>
      </tags>
  </entry>
  <entry>
    <title>开源贡献协议介绍</title>
    <url>/2020/04/05/%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>众所周知，开源代码都有其开源许可证，详细选择参考<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">如何选择开源许可证？</a>。这里不是要讨论开源许可证的问题，而是开源贡献协议。最近在参加一个开源项目时，提到需要使用DCO贡献协议，所以就去了解当下主流的开源贡献协议。</p>
<span id="more"></span>

<h3 id="CLA（Contributor-License-Agreement）协议"><a href="#CLA（Contributor-License-Agreement）协议" class="headerlink" title="CLA（Contributor License Agreement）协议"></a><a href="https://en.wikipedia.org/wiki/Contributor_License_Agreement">CLA</a>（Contributor License Agreement）协议</h3><blockquote>
<p>CLA时对开源License的法律性质补充，多由企业或者组织自行定义，作为开源协议的补充，一次性签署，比如alibaba CLA协议： <a href="https://github.com/aliyun/cla">Alibaba Open Source Individual CLA</a></p>
</blockquote>
<p>使用上来说，CLA只需要签署一次，如<a href="https://cla-assistant.io/alibaba/weex">阿里巴巴个人CLA</a>， <a href="https://cla.developers.google.com/clas">Google CLA</a>，<a href="https://cla.pivotal.io/">Pivotal CLA</a>，<a href="https://github.com/cncf/cla">CNCF CLA</a></p>
<p>使用CLA的用户或者组织</p>
<ul>
<li>Facebook</li>
<li>Eclipse</li>
<li>Go</li>
<li>Google</li>
<li>InfluxDB</li>
<li>Python</li>
<li>Elastic</li>
<li>CNCF</li>
<li>…..</li>
</ul>
<h3 id="DCO（Developer-Certificate-of-Origin）协议"><a href="#DCO（Developer-Certificate-of-Origin）协议" class="headerlink" title="DCO（Developer Certificate of Origin）协议"></a><a href="https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin">DCO</a>（Developer Certificate of Origin）协议</h3><blockquote>
<p>DCO时Linux Foundation提出的，只有四条简短条文， 具体内容如下: <a href="https://developercertificate.org/">DCO</a>，使用上只需要开发者提交信息时追加 Signed-off-by 即可。具体内容(version1.1)如下：</p>
<ol>
<li>该贡献全部或部分由我创建，我有权根据文件中指明的开源许可提交；要么</li>
<li>该贡献是基于以前的工作，这些工作属于适当的开源许可，无论这些工作全部还是部分由我完成，我有权根据相同的开源许可证（除非我被允许根据不同的许可证提交）提交修改后的工作；要么</li>
<li>该贡献由1、2、或 3 证明的其他人直接提供给我，而我没有对其进行修改。</li>
<li>我理解并同意该项目和贡献是公开的，并且该贡献的记录（包括我随之提交的所有个人信息，包括我的签字）将无限期保留，并且可以与本项目或涉及的开源许可证保持一致或者重新分配。</li>
</ol>
</blockquote>
<p>使用方法详见 <a href="https://github.com/probot/dco#how-it-works">Probot: DCO</a>， 其实就是提交代码(commit)时增加<code>-s</code>参数，然后你会在提交信息里看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">This is my commit message</span><br><span class="line"></span><br><span class="line">Signed-off-by: DEVELOPER &lt;random@developer.example.org&gt;</span><br></pre></td></tr></table></figure>

<p>使用DCO的用户或者组织</p>
<ul>
<li>Gitlab</li>
<li>Chef</li>
<li>TiKv</li>
<li>Apache SkyWalking</li>
<li>……</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果你只是一个commiter，请遵从开源项目的贡献者协议，或者发起issue请求变更，如果是自己的开源项目，更看重法律风险，建议使用CLA，看重社区合作，可以使用DCO。</p>
<p><strong>References</strong></p>
<ol>
<li><a href="https://opensource.com/article/18/3/cla-vs-dco-whats-difference">CLA vs. DCO: What’s the difference?</a></li>
<li><a href="https://linux.cn/article-10836-1.html">为何《贡献者许可协议》不利于开源社区？</a></li>
<li><a href="https://github.com/kubernetes/community/issues/2649">Move from CLA to DCO #2649 - github.com</a></li>
<li><a href="https://github.com/cncf/cla">probot&#x2F;dco</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>微服务架构BFF和网关</title>
    <url>/2018/09/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84BFF%E5%92%8C%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<p>BFF 架构图</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251734dmvYjT19.png" alt="202005251734dmvYjT19"></p>
<span id="more"></span>

<p>BFF(Backend for Frontend)也称聚合层或者适配层，上述架构从外到内依次为 端用户体验层-&gt;网关层-&gt;BFF层-&gt;微服务层，主要是讲内部复杂的微服务，适配成对各种不同的用户体验。网关专注解决跨横切面逻辑，包括路由、安全、监控和限流熔断等。</p>
<p>为提高系统的灵活性，在网关层和微服务层之间构建BFF层，这里主要使用GraphQL 构建BFF层。</p>
<p>GraphQL 特点：</p>
<ol>
<li><p>定义数据模型：按需获取</p>
</li>
<li><p>数据分层：通过数据分层可以减少客户端请求次数</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  user(id<span class="punctuation">:</span><span class="number">1001</span>) <span class="punctuation">&#123;</span> <span class="comment">// 第一层</span></span><br><span class="line">    name<span class="punctuation">,</span></span><br><span class="line">    friends <span class="punctuation">&#123;</span> <span class="comment">// 第二层</span></span><br><span class="line">      name<span class="punctuation">,</span></span><br><span class="line">      addr <span class="punctuation">&#123;</span> <span class="comment">// 第三层</span></span><br><span class="line">        country<span class="punctuation">,</span></span><br><span class="line">        city</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>强类型</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const Meeting = new GraphQLObjectType(<span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;Meeting&#x27;<span class="punctuation">,</span></span><br><span class="line">  fields<span class="punctuation">:</span> () =&gt; (<span class="punctuation">&#123;</span></span><br><span class="line">    meetingId<span class="punctuation">:</span> <span class="punctuation">&#123;</span>type<span class="punctuation">:</span> new GraphQLNonNull(GraphQLString)<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    meetingStatus<span class="punctuation">:</span> <span class="punctuation">&#123;</span>type<span class="punctuation">:</span> new GraphQLNonNull(GraphQLString)<span class="punctuation">,</span> defaultValue<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span>)</span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>GraphQL 的类型系统定义了包括 Int, Float, String, Boolean, ID, Object, List, Non-Null 等数据类型。所以在开发过程中，利用强大的强类型检查，能够大大节省开发的时间，同时也很方便前后端进行调试。</p>
</li>
<li><p>协议而非存储：GraphQL 本身并不直接提供后端存储的能力，不绑定任何的数据库或者存储引擎。</p>
</li>
<li><p>无需版本化</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">const PhotoType = new GraphQLObjectType(<span class="punctuation">&#123;</span></span><br><span class="line">  name<span class="punctuation">:</span> &#x27;Photo&#x27;<span class="punctuation">,</span></span><br><span class="line">  fields<span class="punctuation">:</span> () =&gt; (<span class="punctuation">&#123;</span></span><br><span class="line">    photoId<span class="punctuation">:</span> <span class="punctuation">&#123;</span>type<span class="punctuation">:</span> new GraphQLNonNull(GraphQLID)<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    file<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      type<span class="punctuation">:</span> new GraphQLNonNull(FileType)<span class="punctuation">,</span></span><br><span class="line">      deprecationReason<span class="punctuation">:</span> &#x27;FileModel should be removed after offline app code merged.&#x27;<span class="punctuation">,</span></span><br><span class="line">      resolve<span class="punctuation">:</span> (parent) =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">        return parent.file</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    fileId<span class="punctuation">:</span> <span class="punctuation">&#123;</span>type<span class="punctuation">:</span> new GraphQLNonNull(GraphQLID)<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span>)</span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>GraphQL 服务端能够通过添加 deprecationReason，自动将某个字段标注为弃用状态。并且基于 GraphQL 高度的可扩展性，如果不需要某个数据，那么只需要使用新的字段或者结构即可，老的弃用字段给老的客户端提供服务，所有新的客户端使用新的字段获取相关信息。并且考虑到所有的 graphql 请求，都是按照 POST  <code>/graphql</code> 发送请求，所以在 GraphQL 中是无须进行版本化的。</p>
</li>
</ol>
<p>GraphQL 与 Rest</p>
<ol>
<li><strong>数据获取</strong>：Rest 缺乏可扩展性，GraphQL能够按需获取；</li>
<li><strong>API调用</strong>：REST针对每种资源的操作都是一个endpoint，GraphQL只需要一个endpoint；</li>
<li><strong>复杂数据请求</strong>：REST对于嵌套的复杂数据需要多次调用，GraphQL 一次调用，减少网络开销；</li>
<li><strong>错误码处理</strong>：REST能够精确返回HTTP错误码，GraphQL统一返回200，对错误信息进行包装；</li>
<li><strong>版本号</strong>：REST通过v1&#x2F;v2实现，Graph通过Schema扩展实现。</li>
</ol>
<p>BFF 端技术栈</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251734y5Nula49.png" alt="202005251734y5Nula49"></p>
<p><a href="https://juejin.im/entry/5abca4416fb9a028b92d38dd">微服务下使用GraphQL构建BFF</a>中使用node作为BFF主要框架，因自己对node不太熟悉，会尽量采用java来实现相应的功能。GraphQL 使用 query 和 mutation 实现CQRS。</p>
]]></content>
  </entry>
  <entry>
    <title>支付宝和微信接口加密规范调研</title>
    <url>/2020/04/05/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%92%8C%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%8A%A0%E5%AF%86%E8%A7%84%E8%8C%83%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h2 id="支付宝-ISV"><a href="#支付宝-ISV" class="headerlink" title="支付宝(ISV)"></a>支付宝(ISV)</h2><p>参考文档：<a href="https://docs.open.alipay.com/291/106115">https://docs.open.alipay.com/291/106115</a></p>
<p>签名方式：RSA2</p>
<p>具体实现</p>
<p>初始化 AlipayClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(gateway,app_id,private_key,<span class="string">&quot;json&quot;</span>,charset,alipay_public_key,sign_type);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>具体签名过程</p>
<ol>
<li><p>获取encryptor，加密关键参数部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">encryptContent</span> <span class="operator">=</span> getEncryptor().encrypt(</span><br><span class="line">                    appParams.get(AlipayConstants.BIZ_CONTENT_KEY), <span class="built_in">this</span>.encryptType, <span class="built_in">this</span>.charset)</span><br></pre></td></tr></table></figure>

<p>加密算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(AES_CBC_PCK_ALG);</span><br><span class="line"></span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(AES_IV);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Base64.decodeBase64(aesKey.getBytes()), AES_ALG), iv);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] encryptBytes = cipher.doFinal(content.getBytes(charset));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encryptBytes));</span><br></pre></td></tr></table></figure>


</li>
<li><p>签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">signContent</span> <span class="operator">=</span> AlipaySignature.getSignatureContent(requestHolder);</span><br><span class="line">            protocalMustParams.put(AlipayConstants.SIGN,</span><br><span class="line">                getSigner().sign(signContent, <span class="built_in">this</span>.signType, charset));</span><br></pre></td></tr></table></figure>

<p>签名算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrivateKey</span> <span class="variable">priKey</span> <span class="operator">=</span> getPrivateKeyFromPKCS8(AlipayConstants.SIGN_TYPE_RSA,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(privateKey.getBytes()));</span><br><span class="line">                </span><br><span class="line">            java.security.<span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> java.security.Signature</span><br><span class="line">                .getInstance(AlipayConstants.SIGN_SHA256RSA_ALGORITHMS);</span><br><span class="line"></span><br><span class="line">            signature.initSign(priKey);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(charset)) &#123;</span><br><span class="line">                signature.update(content.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                signature.update(content.getBytes(charset));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] signed = signature.sign();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(signed));</span><br></pre></td></tr></table></figure>


</li>
<li><p>增加accessToken等参数发起访问</p>
</li>
</ol>
<h2 id="微信-ISV"><a href="#微信-ISV" class="headerlink" title="微信(ISV)"></a>微信(ISV)</h2><p>主要依靠token机制，支持post，get，消息体明文传输</p>
<p>消息内返回需要加密：</p>
<p>加密机制：aes</p>
<p>主要加密逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encryptedXml</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(genRandomStr(), plainText);</span><br><span class="line">        <span class="type">String</span> <span class="variable">timeStamp</span> <span class="operator">=</span> Long.toString(System.currentTimeMillis() / <span class="number">1000L</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> genRandomStr();</span><br><span class="line">        <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> SHA1.gen(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="built_in">this</span>.token, timeStamp, nonce, encryptedXml&#125;);</span><br><span class="line">        <span class="keyword">return</span> generateXml(encryptedXml, signature, timeStamp, nonce);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">encrypt</span><span class="params">(String randomStr, String plainText)</span> &#123;</span><br><span class="line">        <span class="type">ByteGroup</span> <span class="variable">byteCollector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteGroup</span>();</span><br><span class="line">        <span class="type">byte</span>[]<span class="type">a</span> <span class="variable">randomStringBytes</span> <span class="operator">=</span> randomStr.getBytes(CHARSET);</span><br><span class="line">        <span class="type">byte</span>[] plainTextBytes = plainText.getBytes(CHARSET);</span><br><span class="line">        <span class="type">byte</span>[] bytesOfSizeInNetworkOrder = number2BytesInNetworkOrder(plainTextBytes.length);</span><br><span class="line">        <span class="type">byte</span>[] appIdBytes = <span class="built_in">this</span>.appidOrCorpid.getBytes(CHARSET);</span><br><span class="line">        byteCollector.addBytes(randomStringBytes);</span><br><span class="line">        byteCollector.addBytes(bytesOfSizeInNetworkOrder);</span><br><span class="line">        byteCollector.addBytes(plainTextBytes);</span><br><span class="line">        byteCollector.addBytes(appIdBytes);</span><br><span class="line">        <span class="type">byte</span>[] padBytes = PKCS7Encoder.encode(byteCollector.size());</span><br><span class="line">        byteCollector.addBytes(padBytes);</span><br><span class="line">        <span class="type">byte</span>[] unencrypted = byteCollector.toBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/NoPadding&quot;</span>);</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(<span class="built_in">this</span>.aesKey, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(<span class="built_in">this</span>.aesKey, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            cipher.init(<span class="number">1</span>, keySpec, iv);</span><br><span class="line">            <span class="type">byte</span>[] encrypted = cipher.doFinal(unencrypted);</span><br><span class="line">            <span class="keyword">return</span> BASE64.encodeToString(encrypted);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(var14);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>浅析Java8 CompletableFuture和Stream串行使用产生的一个问题</title>
    <url>/2019/11/02/%E6%B5%85%E6%9E%90Java8%20CompletableFuture%E5%92%8CStream%E4%B8%B2%E8%A1%8C%E4%BD%BF%E7%94%A8%E4%BA%A7%E7%94%9F%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h4><p>问题来源于一次串行使用CompletableFuture和Stream导致CompletableFuture异步失效的问题，问题代码：</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        List&lt;Double&gt; res = Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(size).map(i -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="type">Double</span> <span class="variable">re</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">10</span> * (Math.sin(i) + <span class="number">1</span>)).setScale(<span class="number">2</span>, RoundingMode.HALF_UP).stripTrailingZeros().doubleValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(re.intValue());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> re;</span><br><span class="line">        &#125;, ThreadUtil.fixed()))</span><br><span class="line">                .map(CompletableFuture::join)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>其中<code>ThreadUtil.fixed()</code>是自己封装的线程工具方法，也可以使用<code>Executors.newFixedThreadPool</code>代替，原本是想通过CompletableFuture拿到异步执行的结果并进行处理，串联使用stream后反而未起到作用，先说解决方法：</p>
<ol>
<li>先收集 future 结果到list，再调用新的流运算，即 <code>.map(CompletableFuture::join)</code>方法</li>
<li><code>limit(size).map</code> 之间添加 parallel() 方法，形成 <code>parallelStream()</code>d的形式</li>
</ol>
<p>原因分析：普通的stram可以理解为单纯的foreach循环，每生成一个future立即join，出现异步变同步的现象。</p>
<p>再进一步，既然CompletableFuture和parellStream都可以并行执行任务，有必要比较一下。</p>
<h4 id="parallelStream"><a href="#parallelStream" class="headerlink" title="parallelStream"></a>parallelStream</h4><p>先试用 parallelStream 重写上述方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Double&gt; result = Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">50</span>).parallel().map(i -&gt; &#123;</span><br><span class="line">            <span class="comment">///.....</span></span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>用时：54018ms</p>
<p>想要深入了解parallelStream，需要先了解ForkJoin框架和ForkJoinPool框架。这里简单介绍一下ForkJoinPool，真正了解 ParallelStream 还是需要先弄懂ForkJoinPool的，在此只是简单比较两者功能，不做深入探讨。</p>
<p>ForkJoinPool 使用分治法(Divide-and-Conquer Algorithm)来解决问题，实现了ExecutorService接口，线程数量可以通过构造器传入，默认使用机器的CPU数量。和ThreadPoolExecutor有一定区别，ForkJoinPool可以在运行线程中创建新的任务，并挂起当前的任务，此时线程就能够从队列中选择子任务执行，而ThreadPoolExecutor做不到这一点的。ForkJoinPool的核心算法是工作窃取算法，这样就可以在使用少量的线程来完成大量的任务。比如说ForkJoinPool 4个线程可以处理200完个任务，ThreadPoolExecutor显然是不可行的。</p>
<blockquote>
<p>工作窃取算法的优点是充分利用线程进行并行计算，并减少了线程间的竞争，其缺点是在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。</p>
</blockquote>
<p>ParallelStreams中java8为ForkJoinPool添加了通用线程池，默认线程数量为机器的处理器数量。可以通过 <code>-Djava.util.concurrent.ForkJoinPool.common.parallelism=N</code>来设置ForkJoinPool的线程数量。</p>
<h4 id="拆分成两步重写上述方法"><a href="#拆分成两步重写上述方法" class="headerlink" title="拆分成两步重写上述方法"></a>拆分成两步重写上述方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;CompletableFuture&lt;Double&gt;&gt; futures = Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">50</span>).map(i -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">///.....</span></span><br><span class="line">        &#125;, ThreadUtil.fixed())).collect(Collectors.toList());</span><br><span class="line">        List&lt;Double&gt; ids = futures.stream().map(CompletableFuture::join)</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>用时：57111ms， 通过增加线程数量可以减少执行时间。</p>
<p>References</p>
<p><a href="https://www.cnblogs.com/hongdada/p/8876028.html">Java 多线程中的任务分解机制-ForkJoinPool，以及CompletableFuture</a></p>
<p><a href="https://blog.csdn.net/itguangit/article/details/78624404">CompletableFuture 组合式异步编程</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>消息中间件预研-rabbitmq, rocketmq</title>
    <url>/2018/01/04/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%A2%84%E7%A0%94-kafka,%20rabbitmq,%20rocketmq/</url>
    <content><![CDATA[<p>消息中间件在服务开发中起着重要的作用，应对业务需求，对rabbitmq，rocketmq进行预研，kafka暂时不做深入了解。</p>
<span id="more"></span>

<p><strong>消息中间件应用场景</strong></p>
<ol>
<li><p>可以做延迟设计<br>比如我们有一些数据，需要过五分钟后再被使用，这时候就需要使用延迟队列设计，比如在RabbitMQ中利用死信队列实现。<br>具体实现在这里：<a href="http://www.cnblogs.com/haoxinyue/p/6613706.html">http://www.cnblogs.com/haoxinyue/p/6613706.html</a></p>
</li>
<li><p>异步处理<br>这个场景主要应用在多任务执行的场景。</p>
</li>
<li><p>应用解耦<br>在大型微服务架构中，有一些无状态的服务经常考虑使用mq做消息通知和转换。</p>
</li>
<li><p>分布式事务最终一致性<br>可以使用基于消息中间件的队列做分布式事务的消息补偿，实现最终一致性。</p>
</li>
<li><p>流量削峰<br>一般在秒杀或团抢活动中使用广泛，可以通过队列实现秒杀的人数和商品控制，还可以缓解短时间压垮应用系统。</p>
</li>
<li><p>日志处理<br>我们在做监控，或者日志采集的时候经常用队列来做消息的传输和暂存。</p>
</li>
</ol>
<!--more-->


<h3 id="RocketMQ-Apache-4-2-0"><a href="#RocketMQ-Apache-4-2-0" class="headerlink" title="RocketMQ(Apache 4.2.0)"></a>RocketMQ(Apache 4.2.0)</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Disk Flush (磁盘刷新&#x2F;同步操作):  就是将内存的数据落地，存储在磁盘中.</p>
<ul>
<li><strong>SYNC_FLUSH（同步刷盘）：</strong>生产者发送的每一条消息都在保存到磁盘成功后才返回告诉生产者成功。这种方式不会存在消息丢失的问题，但是有很大的磁盘IO开销，性能有一定影响。</li>
<li><strong>ASYNC_FLUSH（异步刷盘）：</strong>生产者发送的每一条消息并不是立即保存到磁盘，而是暂时缓存起来，然后就返回生产者成功。随后再异步的将缓存数据保存到磁盘，有两种情况：1是定期将缓存中更新的数据进行刷盘，2是当缓存中更新的数据条数达到某一设定值后进行刷盘。这种方式会存在消息丢失（在还未来得及同步到磁盘的时候宕机），但是性能很好。默认是这种模式。</li>
</ul>
<p>Broker Replication (Broker间数据同步&#x2F;复制): 集群环境下需要部署多个Broker，Broker分为两种角色：一种是master，即可以写也可以读，其brokerId&#x3D;0，只能有一个；另外一种是slave，只允许读，其brokerId为非0。一个master与多个slave通过指定相同的brokerName被归为一个broker set（broker集）。通常生产环境中，我们至少需要2个broker set。</p>
<p>Broker Replication只的就是slave获取或者是复制master的数据.</p>
<ul>
<li><strong>Sync Broker：</strong>生产者发送的每一条消息都至少同步复制到一个slave后才返回告诉生产者成功，即“同步双写”。</li>
<li><strong>Async Broker：</strong>生产者发送的每一条消息只要写入master就返回告诉生产者成功。然后再“异步复制”到slave。</li>
</ul>
<h4 id="start-十分钟入门RocketMQ"><a href="#start-十分钟入门RocketMQ" class="headerlink" title="start 十分钟入门RocketMQ"></a>start <a href="http://jm.taobao.org/2017/01/12/rocketmq-quick-start-in-10-minutes/">十分钟入门RocketMQ</a></h4><p><strong>QuickStart</strong>: <a href="https://rocketmq.apache.org/docs/quick-start/">apache-quickstart</a></p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251741N7n6xF13.png" alt="202005251741N7n6xF13"></p>
<h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><ul>
<li><p>使用不同配置文件启动nameserv(默认9876)</p>
<p>无状态节点，可集群部署，<strong>节点之间无任何信息同步</strong>（Broker与每个namesrv连接，可以保证信息同步性）</p>
<p>nameserv的所有配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rocketmqHome</span>=<span class="string">/usr/local/rocketmq</span></span><br><span class="line"><span class="attr">kvConfigPath</span>=<span class="string">/Users/zhangyanghong/namesrv/kvConfig.json</span></span><br><span class="line"><span class="attr">productEnvName</span>=<span class="string">center</span></span><br><span class="line"><span class="attr">clusterTest</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">orderMessageEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">9876</span></span><br><span class="line"><span class="attr">serverWorkerThreads</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">serverCallbackExecutorThreads</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">serverSelectorThreads</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">serverOnewaySemaphoreValue</span>=<span class="string">256</span></span><br><span class="line"><span class="attr">serverAsyncSemaphoreValue</span>=<span class="string">64</span></span><br><span class="line"><span class="attr">serverChannelMaxIdleTimeSeconds</span>=<span class="string">120</span></span><br><span class="line"><span class="attr">serverSocketSndBufSize</span>=<span class="string">4096</span></span><br><span class="line"><span class="attr">serverSocketRcvBufSize</span>=<span class="string">4096</span></span><br><span class="line"><span class="attr">serverPooledByteBufAllocatorEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">useEpollNativeSelector</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>通过修改listenPort在一台机器上部署启动两个nameserv</p>
<p><code>nohup sh mqnamesrv -c mqnamesrv-a.conf &amp;</code></p>
</li>
<li><p>启动broker(默认10911)集群</p>
<p>broker的所用配置项</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rocketmqHome</span>=<span class="string">/usr/local/rocketmq</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string"></span></span><br><span class="line"><span class="comment">## 本机ip地址，默认系统自动识别</span></span><br><span class="line"><span class="attr">brokerIP1</span>=<span class="string">172.18.48.79</span></span><br><span class="line"><span class="attr">brokerIP2</span>=<span class="string">172.18.48.79</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">jiexiu’Mac</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">DefaultCluster</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">brokerPermission</span>=<span class="string">6</span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">clusterTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">brokerTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">messageStorePlugIn</span>=<span class="string"></span></span><br><span class="line"><span class="attr">sendMessageThreadPoolNums</span>=<span class="string">32</span></span><br><span class="line"><span class="attr">pullMessageThreadPoolNums</span>=<span class="string">24</span></span><br><span class="line"><span class="attr">adminBrokerThreadPoolNums</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">clientManageThreadPoolNums</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">flushConsumerOffsetInterval</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">flushConsumerOffsetHistoryInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">rejectTransactionMessage</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">fetchNamesrvAddrByAddressServer</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">sendThreadPoolQueueCapacity</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">pullThreadPoolQueueCapacity</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">filterServerNums</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">longPollingEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">shortPollingTimeMills</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">notifyConsumerIdsChangedEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">highSpeedMode</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">commercialEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">commercialTimerCount</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">commercialTransCount</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">commercialBigCount</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transferMsgByHeap</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">maxDelayTime</span>=<span class="string">40</span></span><br><span class="line"><span class="attr">regionId</span>=<span class="string">DefaultRegion</span></span><br><span class="line"><span class="attr">registerBrokerTimeoutMills</span>=<span class="string">6000</span></span><br><span class="line"><span class="attr">slaveReadEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">disableConsumeIfConsumerReadSlowly</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">consumerFallbehindThreshold</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">waitTimeMillsInSendQueue</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">startAcceptSendRequestTimeStamp</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="attr">serverWorkerThreads</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">serverCallbackExecutorThreads</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">serverSelectorThreads</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">serverOnewaySemaphoreValue</span>=<span class="string">256</span></span><br><span class="line"><span class="attr">serverAsyncSemaphoreValue</span>=<span class="string">64</span></span><br><span class="line"><span class="attr">serverChannelMaxIdleTimeSeconds</span>=<span class="string">120</span></span><br><span class="line"><span class="attr">serverSocketSndBufSize</span>=<span class="string">131072</span></span><br><span class="line"><span class="attr">serverSocketRcvBufSize</span>=<span class="string">131072</span></span><br><span class="line"><span class="attr">serverPooledByteBufAllocatorEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">useEpollNativeSelector</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">clientWorkerThreads</span>=<span class="string">4</span></span><br><span class="line"><span class="attr">clientCallbackExecutorThreads</span>=<span class="string">4</span></span><br><span class="line"><span class="attr">clientOnewaySemaphoreValue</span>=<span class="string">65535</span></span><br><span class="line"><span class="attr">clientAsyncSemaphoreValue</span>=<span class="string">65535</span></span><br><span class="line"><span class="attr">connectTimeoutMillis</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">channelNotActiveInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">clientChannelMaxIdleTimeSeconds</span>=<span class="string">120</span></span><br><span class="line"><span class="attr">clientSocketSndBufSize</span>=<span class="string">131072</span></span><br><span class="line"><span class="attr">clientSocketRcvBufSize</span>=<span class="string">131072</span></span><br><span class="line"><span class="attr">clientPooledByteBufAllocatorEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">clientCloseSocketIfTimeout</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/Users/zhangyanghong/store</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/Users/zhangyanghong/store/commitlog</span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">6000000</span></span><br><span class="line"><span class="attr">flushIntervalCommitLog</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">flushCommitLogTimed</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">flushIntervalConsumeQueue</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">cleanResourceInterval</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">deleteCommitLogFilesInterval</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">deleteConsumeQueueFilesInterval</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">destroyMapedFileIntervalForcibly</span>=<span class="string">120000</span></span><br><span class="line"><span class="attr">redeleteHangedFileInterval</span>=<span class="string">120000</span></span><br><span class="line"><span class="comment">## 删除时间点，默认凌晨4点</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">75</span></span><br><span class="line"><span class="comment">## 文件保留时间，默认48小时</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">72</span></span><br><span class="line"><span class="attr">putMsgIndexHightWater</span>=<span class="string">600000</span></span><br><span class="line"><span class="attr">maxMessageSize</span>=<span class="string">4194304</span></span><br><span class="line"><span class="attr">checkCRCOnRecover</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">flushCommitLogLeastPages</span>=<span class="string">4</span></span><br><span class="line"><span class="attr">flushLeastPagesWhenWarmMapedFile</span>=<span class="string">4096</span></span><br><span class="line"><span class="attr">flushConsumeQueueLeastPages</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">flushCommitLogThoroughInterval</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">flushConsumeQueueThoroughInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">maxTransferBytesOnMessageInMemory</span>=<span class="string">262144</span></span><br><span class="line"><span class="attr">maxTransferCountOnMessageInMemory</span>=<span class="string">32</span></span><br><span class="line"><span class="attr">maxTransferBytesOnMessageInDisk</span>=<span class="string">65536</span></span><br><span class="line"><span class="attr">maxTransferCountOnMessageInDisk</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">accessMessageInMemoryMaxRatio</span>=<span class="string">40</span></span><br><span class="line"><span class="comment">## 是否开启消息索引功能</span></span><br><span class="line"><span class="attr">messageIndexEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">maxHashSlotNum</span>=<span class="string">5000000</span></span><br><span class="line"><span class="attr">maxIndexNum</span>=<span class="string">20000000</span></span><br><span class="line"><span class="attr">maxMsgsNumBatch</span>=<span class="string">64</span></span><br><span class="line"><span class="comment">## 是否提供安全的消息索引机制，索引保证不丢</span></span><br><span class="line"><span class="attr">messageIndexSafe</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">haListenPort</span>=<span class="string">10912</span></span><br><span class="line"><span class="attr">haSendHeartbeatInterval</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">haHousekeepingInterval</span>=<span class="string">20000</span></span><br><span class="line"><span class="attr">haTransferBatchSize</span>=<span class="string">32768</span></span><br><span class="line"><span class="attr">haMasterAddress</span>=<span class="string"></span></span><br><span class="line"><span class="attr">haSlaveFallbehindMax</span>=<span class="string">268435456</span></span><br><span class="line"><span class="comment">## Broker的角色：ASYNC_MASTER异步复制Master; SYNC_MASTER同步双写MASTER; SLAVE</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">syncFlushTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">messageDelayLevel</span>=<span class="string">1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span><br><span class="line"><span class="attr">flushDelayOffsetInterval</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">cleanFileForciblyEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">warmMapedFileEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">offsetCheckInSlave</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">debugLockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">duplicationEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">diskFallRecorded</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">osPageCacheBusyTimeOutMills</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">defaultQueryMaxNum</span>=<span class="string">32</span></span><br></pre></td></tr></table></figure>

<p>其中重要的配置信息如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">namesrvAddr</span>=<span class="string"></span></span><br><span class="line"><span class="attr">brokerIP1</span>=<span class="string">172.18.48.79</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">jiexiu’Mac</span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">DefaultCluster</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">rejectTransactionMessage</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">fetchNamesrvAddrByAddressServer</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/Users/zhangyanghong/store</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/Users/zhangyanghong/store/commitlog</span></span><br><span class="line"><span class="attr">flushIntervalCommitLog</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">flushCommitLogTimed</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">72</span></span><br><span class="line"><span class="attr">maxTransferBytesOnMessageInMemory</span>=<span class="string">262144</span></span><br><span class="line"><span class="attr">maxTransferCountOnMessageInMemory</span>=<span class="string">32</span></span><br><span class="line"><span class="attr">maxTransferBytesOnMessageInDisk</span>=<span class="string">65536</span></span><br><span class="line"><span class="attr">maxTransferCountOnMessageInDisk</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">accessMessageInMemoryMaxRatio</span>=<span class="string">40</span></span><br><span class="line"><span class="attr">messageIndexEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">messageIndexSafe</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">haMasterAddress</span>=<span class="string"></span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">cleanFileForciblyEnable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动broker</p>
<p><code>sh mqbroker -n &#39;127.0.0.1:9876;127.0.0.1:9877&#39; -c ../conf/2m-noslave/broker-a.properties  &gt; /dev/null 2&gt;&amp;1 &amp;</code></p>
</li>
</ul>
</li>
<li><p>集群验证</p>
<p><code>sh mqadmin clusterList -n 127.0.0.1:9876 </code></p>
<p>输出信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Cluster Name     <span class="comment">#Broker Name            #BID  #Addr                  #Version                #InTPS(LOAD)       #OutTPS(LOAD) #PCWait(ms) #Hour #SPACE</span></span></span><br><span class="line">DefaultCluster    broker-a                0     172.18.48.79:10911     V3_5_8                   0.00(0,0ms)         0.00(0,0ms)          0 412299.47 0.5476</span><br><span class="line">DefaultCluster    broker-b                0     172.18.48.79:12911     V3_5_8                   0.00(0,0ms)         0.00(0,0ms)          0 412299.47 0.5476</span><br></pre></td></tr></table></figure>


</li>
<li><p>默认的集群配置conf子目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2m-2s-async     // 两个master 两个slave异步</span><br><span class="line">2m-2s-sync		// 两个master 两个slave同步</span><br><span class="line">2m-noslave		// 两个master 没有slave</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://blog.csdn.net/zhu_tianwei/article/details/40949523">broker 的master和slave (Slave 不可写，但可读)</a></p>
<ul>
<li><strong>单个master</strong>: 风险较大, 不建议生产使用</li>
<li><strong>多master</strong>: <ul>
<li>配置简单，消息可靠，性能最高</li>
<li>单台机器宕机期间，未被消费的消息在机器恢复之前不可订阅，消息实时性会受到影响</li>
</ul>
</li>
<li><strong>多master多slave，异步复制</strong>:<ul>
<li>每个 Master 配置一个 Slave，有多对Master-Slave，HA 采用异步复制方式，主备有短暂消息延迟，毫秒级</li>
<li>优点:  即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，因为 Master 宕机后，消费者仍然可以从 Slave 消费，此过程对应用透明。不需要人工干预。性能同多 Master 模式几乎一样</li>
<li>缺点: Master 宕机，磁盘损坏情况，会丢失少量消息</li>
</ul>
</li>
<li><strong>多master多slave，同步双写</strong>:<ul>
<li>每个 Master 配置一个 Slave，有多对Master-Slave，HA 采用同步双写方式，主备都写成功，向应用返回成功</li>
<li>优点: 数据与服务都无单点，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</li>
<li>缺点: 性能比异步复制模式略低，大约低 10%左右，发送单个消息的 RT 会略高。目前主宕机后，备机不能自动切换为主机，后续会支持自动切换功能。</li>
</ul>
</li>
</ul>
</li>
<li><p>问题</p>
<ol>
<li><p>出现 <code>Lock failed,MQ already started</code></p>
<p><strong>解决方案</strong>: 修改配置文件中的<code>storePathRootDir</code>项</p>
</li>
<li><p>启动 mqnamesrv &#x2F; mqbroker服务报错，显示内存不够，需大于2G？具体表现: “*VM warning: INFO: OS::commit_memory(0x00000006c0000000, 2147483648, 0) faild; error&#x3D;’Cannot allocate memory’ (errno&#x3D;12)*”</p>
<p><strong>解决方案</strong>：修改<code>/RocketMQ/devnev/bin/</code> 下的服务启动脚本 <code>runserver.sh</code> 、<code>runbroker.sh</code> 中对于内存的限制，改成如下示例：</p>
<p><code>JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx128m -Xmn128m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</code></p>
</li>
</ol>
</li>
</ul>
<h4 id="启动rocketmq-console"><a href="#启动rocketmq-console" class="headerlink" title="启动rocketmq-console"></a>启动rocketmq-console</h4><p><code>mvn spring-boot:run</code></p>
<p>or</p>
<p><code>java -jar rocketmq-console-ng-1.0.0.jar --server.port=12581 --rocketmq.config.namesrvAddr=10.89.0.64:9876;10.89.0.65:9876  </code></p>
<h4 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h4><p>rocketmq中一个broker-name其实就相当于kafka-broker中的一个partition，而rocketmq每一个slave就相当于kafka中的一个replication，这种情况，所以rocketmq的特点相当于单个partition支持多队列，大致的原理图如下：</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251740w7uFTh26.png" alt="202005251740w7uFTh26"></p>
<p>默认: 一个topic的队列数是8</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>producer生产消息过多，customer来不及消费?</p>
</li>
<li><p>消息的重试机制</p>
</li>
<li><p>broker和client&#x2F;producer版本不一致问题</p>
<p>解决: 会导致已消费消息堆积，重启customer会重复消费，更换一致版本</p>
</li>
<li><p>队列个数设置</p>
<p>producer发送消息时候设置，特别注意：同一个topic仅当第一次创建的时候设置有效，以后修改无效，除非修改broker服务器上的consume.json文件，</p>
<p>demo：<code>mqProducer.setDefaultTopicQueueNums(5)</code></p>
<p>参考：<a href="http://www.mamicode.com/info-detail-327693.html">http://www.mamicode.com/info-detail-327693.html</a></p>
</li>
<li><p><a href="http://www.iteye.com/topic/1146280">其他常见问题3.2.4</a></p>
</li>
</ol>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h4><ul>
<li>使用kerl安装和管理erlang，参考 <a href="https://segmentfault.com/a/1190000004909357">Erlang版本管理工具: Kerl</a>  ,  <a href="https://www.jianshu.com/p/caddaa8251af">安装Erlang&#x2F;OTP的简单方法</a>, 其他安装方法 <a href="https://zfanw.com/blog/install-erlang-on-centos-7.html">在CentOS上安装erlang</a></li>
<li>设置环境变量</li>
</ul>
<h4 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h4><ul>
<li><p>下载rabbit rpm包</p>
</li>
<li><p>错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error: Package: rabbitmq-server-3.7.2-1.el7.noarch (/rabbitmq-server-3.7.2-1.el7.noarch)</span><br><span class="line">           Requires: erlang &gt;= 19.3</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br></pre></td></tr></table></figure>

<p>执行 <code>rpm --nodeps -ivh rabbitmq-server-3.7.2-1.el7.noarch.rpm</code></p>
</li>
<li><p>启动命令(&#x2F;usr&#x2F;lib&#x2F;rabbitmq &#x2F;etc&#x2F;rabbitmq  —- &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.7.2)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server start</span><br><span class="line">service rabbitmq-server stop</span><br><span class="line">service rabbitmq-server restart</span><br><span class="line">service rabbitmq-server status</span><br><span class="line">./rabbitmqctl stop </span><br></pre></td></tr></table></figure>
</li>
<li><p>开启管理功能</p>
<p><code>rabbitmq-plugins enable rabbitmq_management</code></p>
</li>
<li><p>启动服务</p>
<p><code>rabbitmq-server -detached</code></p>
</li>
<li><p>添加用户权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user albert password</span><br><span class="line">rabbitmqctl set_user_tags albert administrator</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机自启动</p>
<p><code>chkconfig rabbitmq-server on</code></p>
</li>
<li><p>修改配置文件，开启远程用户访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/share/doc/rabbitmq-server-3.7.2/rabbitmq.config.example /etc/rabbitmq/  </span><br><span class="line">mv rabbitmq.config.example rabbitmq.config </span><br></pre></td></tr></table></figure>

<p>增加 </p>
<p><code>&#123;loopback_users, []&#125;</code></p>
</li>
<li><p>集群部署</p>
<p><a href="https://blog.apporc.org/2016/04/rabbitmq-%E9%85%8D%E7%BD%AE%E5%88%9D%E6%AD%A5/">RabbitMQ 配置初步</a></p>
<p><a href="http://blog.csdn.net/wenyu826/article/details/71108279">Centos7 安装rabbitmq</a></p>
</li>
<li><p>reference</p>
<p><a href="https://www.vultr.com/docs/how-to-install-rabbitmq-on-centos-7">How-to-install-rabbitmq-on-centos-7</a></p>
</li>
</ul>
<h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念:"></a>重要概念:</h4><p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251738vXysfb29.png" alt="202005251738vXysfb29"></p>
<ul>
<li>左侧 P 代表 生产者，也就是往 RabbitMQ 发消息的程序。</li>
<li>中间即是 RabbitMQ，<em>其中包括了 交换机 和 队列。</em></li>
<li>右侧 C 代表 消费者，也就是往 RabbitMQ 拿消息的程序。</li>
</ul>
<h5 id="重要的概念：虚拟主机，交换机，队列，和绑定"><a href="#重要的概念：虚拟主机，交换机，队列，和绑定" class="headerlink" title="重要的概念：虚拟主机，交换机，队列，和绑定"></a>重要的概念：<em>虚拟主机，交换机，队列，和绑定</em></h5><ul>
<li><strong>虚拟主机</strong>：一个虚拟主机持有一组交换机、队列和绑定。为什么需要多个虚拟主机呢？很简单，RabbitMQ当中，<em>用户只能在虚拟主机的粒度进行权限控制。</em> 因此，如果需要禁止A组访问B组的交换机&#x2F;队列&#x2F;绑定，必须为A和B分别创建一个虚拟主机。每一个RabbitMQ服务器都有一个默认的虚拟主机“&#x2F;”。</li>
<li><strong>交换机</strong>：<em>Exchange 用于转发消息，但是它不会做存储</em> ，如果没有 Queue bind 到 Exchange 的话，它会直接丢弃掉 Producer 发送过来的消息。这里有一个比较重要的概念：<strong>路由键</strong> 。消息到交换机的时候，交互机会转发到对应的队列中，那么究竟转发到哪个队列，就要根据该路由键。</li>
<li><strong>绑定</strong>：也就是交换机需要和队列相绑定，这其中如上图所示，是多对多的关系。</li>
</ul>
<h5 id="交换机-Exchange"><a href="#交换机-Exchange" class="headerlink" title="交换机(Exchange)"></a>交换机(Exchange)</h5><p>交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用ack模式后，交换机找不到队列会返回错误。交换机有四种类型：Direct, topic, Headers and Fanout</p>
<ul>
<li><p>Direct：direct 类型的行为是”先匹配, 再投送”. 即在绑定时设定一个 <strong>routing_key</strong>, 消息的<strong>routing_key</strong> 匹配时, 才会被交换器投送到绑定的队列中去.</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251739F4SpRm38.png" alt="202005251739F4SpRm38"></p>
</li>
<li><p>Topic：按规则转发消息（最灵活）</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251739gtEx4l55.png" alt="202005251739gtEx4l55"></p>
</li>
<li><p><a href="http://codedestine.com/rabbitmq-headers-exchange/">Headers</a>：设置header attribute参数类型的交换机</p>
</li>
<li><p>Fanout：转发消息到所有绑定队列</p>
</li>
</ul>
<p>性能比较: <a href="http://www.gaort.com/index.php/archives/366">RabbitMQ三种Exchange模式(fanout,direct,topic)的性能比较</a></p>
<p>理解rabbitmq的概念 : <a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251721dJ8kJ302.png" alt="202005251721dJ8kJ302"></p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251723BRp6Gp04.png" alt="202005251723BRp6Gp04"></p>
<p><strong>示例代码</strong>: <a href="https://github.com/silloy/boot-in-action">boot-in-action</a></p>
<p><strong>References</strong></p>
<ul>
<li><a href="http://alibaba.github.io/RocketMQ-docs/document/openuser/mqvsmq.pdf">消息队列中间件调研文档</a></li>
<li><a href="http://blog.wentong.me/2016/01/message-queue-research/">几款消息中间的调研</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1006035">消息队列及常见消息队列介绍</a></li>
<li><a href="https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka">Understanding When to use RabbitMQ or Apache Kafka</a></li>
<li><a href="http://blog.zollty.com/b/archive/high-throughput-high-availability-MQ-comparative-analysis.html">高吞吐、高可用MQ对比分析</a></li>
<li><a href="http://jm.taobao.org/2016/04/01/kafka-vs-rabbitmq-vs-rocketmq-message-send-performance/">Kafka、RabbitMQ、RocketMQ消息中间件的对比 —— 消息发送性能</a></li>
<li><a href="https://tech.meituan.com/mq-design.html">消息队列设计精要</a></li>
<li><a href="https://www.jianshu.com/p/453c6e7ff81c">分布式开放消息系统(RocketMQ)的原理与实践</a></li>
<li><a href="http://www.ityouknow.com/springboot/2016/11/30/springboot(%E5%85%AB)-RabbitMQ%E8%AF%A6%E8%A7%A3.html">RabbitMQ详解</a></li>
<li><a href="https://www.jianshu.com/p/24f464f9161c">消息队列探秘-RabbitMQ消息队列介绍</a></li>
<li><a href="https://www.jianshu.com/p/35fbbdc9ca60">RabbitMq延迟、重试队列及Spring Boot的黑科技</a></li>
<li><a href="https://www.jianshu.com/p/6579e48d18ae">rabbitmq可靠发送的自动重试机制</a></li>
</ul>
]]></content>
      <tags>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>由一次Base64编码异常引起的小bug</title>
    <url>/2020/05/04/%E7%94%B1%E4%B8%80%E6%AC%A1Base64%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B0%8Fbug/</url>
    <content><![CDATA[<p>base64是一种基本的加密算法，在Java中可以使用java自带的base64编码，也可以用apache 的commons-codec包。最近在使用commons-codec 1.10 版本能正常解密微信的消息，升级为1.13后出现了不能正常decode，出现异常</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value</span><br><span class="line"></span><br><span class="line">	at org.apache.commons.codec.binary.Base64.validateCharacter(Base64.java:798)</span><br><span class="line">	at org.apache.commons.codec.binary.Base64.decode(Base64.java:477)</span><br><span class="line">	at org.apache.commons.codec.binary.BaseNCodec.decode(BaseNCodec.java:411)</span><br><span class="line">	at org.apache.commons.codec.binary.BaseNCodec.decode(BaseNCodec.java:395)</span><br></pre></td></tr></table></figure>



<ol>
<li><p>具体场景</p>
<p>处理微信公众号消息时，对消息内容进行必须的加解密，出现的问题是处理aesKey时出现的，具体demo如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WxOpenCryptUtil</span><span class="params">(WxOpenConfigStorage wxOpenConfigStorage)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param token          公众平台上，开发者设置的token</span></span><br><span class="line"><span class="comment">     * @param encodingAesKey 公众平台上，开发者设置的EncodingAESKey</span></span><br><span class="line"><span class="comment">     * @param appId          公众平台appid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">encodingAesKey</span> <span class="operator">=</span> wxOpenConfigStorage.getComponentAesKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> wxOpenConfigStorage.getComponentToken();</span><br><span class="line">    <span class="type">String</span> <span class="variable">appId</span> <span class="operator">=</span> wxOpenConfigStorage.getComponentAppId();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.token = token;</span><br><span class="line">    <span class="built_in">this</span>.appidOrCorpid = appId;</span><br><span class="line">    <span class="built_in">this</span>.aesKey = Base64.decodeBase64(encodingAesKey + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>当升级commons-codec版本为1.13及以上时，会出现上述异常</p>
</li>
<li><p>出现的原因</p>
<p>1.13出现异常的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">validateCharacter</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> numBitsToDrop, <span class="keyword">final</span> Context context)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((context.ibitWorkArea &amp; numBitsToDrop) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">        <span class="string">&quot;Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context.ibitWorkArea &gt;&gt; numBitsToDrop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仔细分析可以看出编解码是在<code>BaseNCodec.java</code>是Base64和Base32的基类</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202003301159b2eA8l45.png" alt="image-20200330115937553"></p>
<p>可以看出唯一的差别就是在解码时对参数做了校验。有必要了解下这个参数校验做了些什么？</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.ibitWorkArea &amp; numBitsToDrop</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>ibitWorkArea</strong>: 位处理的基本位数</p>
<p><strong>numBitsToDrop</strong>:  应该为空的低位数目</p>
<p>可以看出当 <code>context.ibitWorkArea &amp; numBitsToDrop</code>不为0时就会抛出异常，实际上只有base64严格模式编码下，才可能会为0，松散模式不会为0</p>
</li>
<li><p>解决办法</p>
<p>降低版本到1.12以下可以解决该问题，或者等commons-codec版本更新到1.15，最新的源码已经处理了该问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateCharacter</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> emptyBitsMask, <span class="keyword">final</span> Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isStrictDecoding() &amp;&amp; (context.ibitWorkArea &amp; emptyBitsMask) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                <span class="string">&quot;Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. &quot;</span> +</span><br><span class="line">                <span class="string">&quot;Expected the discarded bits from the character to be zero.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展</p>
<p>base64的严格模式和松散模式定义，直接引用源码了</p>
<blockquote>
<p><strong>Lenient</strong>: Any trailing bits are composed into 8-bit bytes where possible.<br>The remainder are discarded.<br><strong>Strict</strong>: The decoding will raise an {@link IllegalArgumentException} if trailing bits<br>are not part of a valid encoding. Any unused bits from the final character must<br>be zero. Impossible counts of entire final characters are not allowed.</p>
</blockquote>
</li>
</ol>
<p><strong>References</strong></p>
<p><a href="https://blog.csdn.net/kevin_mails/article/details/87878601">使用java8的java.util.Base64报“java.lang.IllegalArgumentException: Illegal base64 character d”的问题</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">Base64笔记</a></p>
<p><a href="https://issues.apache.org/jira/browse/CODEC-279">Base64.decode fails on Java11 for certain valid base 64 encoded String</a></p>
]]></content>
  </entry>
  <entry>
    <title>补码之求相反数</title>
    <url>/2020/05/02/%E8%A1%A5%E7%A0%81%E4%B9%8B%E6%B1%82%E7%9B%B8%E5%8F%8D%E6%95%B0/</url>
    <content><![CDATA[<h3 id="概念-来自wikipedia"><a href="#概念-来自wikipedia" class="headerlink" title="概念[来自wikipedia]"></a><strong>概念</strong>[来自wikipedia]</h3><p>**原码(True form)**：一个<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a>数左边加上符号位后所得到的码，且当二进制数大于0时，符号位为0；二进制数小于0时，符号位为1；二进制数等于0时，符号位可以为0或1(+0&#x2F;-0)</p>
<span id="more"></span>

<p><strong>反码(One’s complement)<strong>：一种在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a>中数的<a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E7%A2%BC">机器码</a>表示。对于单个数值（二进制的0和1）而言，对其进行</strong>取反</strong>操作就是将0变为1，1变为0</p>
<p>**补码(2’s complement)**：一种用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%80%B2%E4%BD%8D">二进制</a>表示有号数的方法，也是一种将数字的正负号变号的方式，主要优点是 <strong>不需因为数字的正负而使用不同的计算方式</strong></p>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a><strong>计算</strong></h3><p><strong>正数</strong>：原码、反码、补码相同</p>
<p><strong>负数</strong>：反码 — <em>符号位不变化，其余位数取反</em>，补码 — <em>符号位不变化，其余各位原码取反+1， 即 反码+1</em></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">byteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        reverse(<span class="number">0</span>);</span><br><span class="line">        reverse(<span class="number">6</span>);</span><br><span class="line">        reverse(-<span class="number">6</span>);</span><br><span class="line">        reverse(<span class="number">128</span>);</span><br><span class="line">        reverse(-<span class="number">128</span>);</span><br><span class="line">        reverse(<span class="number">1280</span>);</span><br><span class="line">        reverse(-<span class="number">1280</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">reverse</span><span class="params">(Integer a)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%5d\t%32s\t%5d\t%32s\t%5d\t%32s%n&quot;</span>, a, Integer.toBinaryString(a), ~a, Integer.toBinaryString((~a)), ~a + <span class="number">1</span>, Integer.toBinaryString((~a + <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">return</span> ~a + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0	                               0	   -1	11111111111111111111111111111111	    0	                               0</span><br><span class="line">    6	                             110	   -7	11111111111111111111111111111001	   -6	11111111111111111111111111111010</span><br><span class="line">   -6	11111111111111111111111111111010	    5	                             101	    6	                             110</span><br><span class="line">  128	                        10000000	 -129	11111111111111111111111101111111	 -128	11111111111111111111111110000000</span><br><span class="line"> -128	11111111111111111111111110000000	  127	                         1111111	  128	                        10000000</span><br><span class="line"> 1280	                     10100000000	-1281	11111111111111111111101011111111	-1280	11111111111111111111101100000000</span><br><span class="line">-1280	11111111111111111111101100000000	 1279	                     10011111111	 1280	                     10100000000</span><br></pre></td></tr></table></figure>

<p>可以看出：</p>
<ul>
<li><p>对一个数字直接取反，并不是其相反数，需要+1</p>
</li>
<li><p>[+0]原码&#x3D;0000 0000，   [-0]原码&#x3D;1000 0000</p>
<p>[+0]反码&#x3D;0000 0000，   [-0]反码&#x3D;1111 1111</p>
<p>[+0]补码&#x3D;0000 0000，   [-0]补码&#x3D;0000 0000</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>谈数据库事务隔离</title>
    <url>/2020/07/13/%E8%B0%88%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</url>
    <content><![CDATA[<p>事务隔离主要是针对ACID中的 <strong>I</strong> 隔离性设置的，在了解这几种数据库事务之前需要先了解几个重要概念：</p>
<span id="more"></span>

<ul>
<li><p><strong>脏读</strong> - 事务1(READ)访问了事务2(WRITE)未提交的事务</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/20200710/2154loev8R53.png" alt="2154loev8R53"></p>
</li>
<li><p><strong>幻读</strong> - 一个事务读取了2次，得到的结果不一样</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/20200710/2155aZxX8o26.png" alt="2155aZxX8o26"></p>
</li>
<li><p><strong>不可重复读</strong> - 一个事务读取同一条记录2次，得到的结果不一致</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/20200710/2156wuH3uE40.png" alt="2156wuH3uE40"></p>
</li>
</ul>
<p>为了解决上面的三个问题，有四种数据库隔离级别</p>
<ol>
<li><p><strong>READ UNCOMMITTED</strong></p>
<p>故名思义，读未提交，允许脏读，当然也会出现不可重复读和幻读，可以通过“排他写锁”实现，在表对某行进行修改时，会对该行加上行共享锁</p>
</li>
<li><p><strong>READ COMMITTED</strong></p>
<p>读提交，允许不可重复读取，但不允许脏读取。这可以通过“瞬间共享读锁”和“排他写锁”实现。读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。在本事务未提交之前其他事务的增删改操作提交后会影响读的结果。 <strong>读的是最新结果</strong> 。在对表进行修改时，会对表数据行加上行共享锁</p>
</li>
<li><p><strong>Repeatable Read</strong></p>
<p>可重复读，禁止不可重复读取和脏读取，但是有时可能出现幻读数据。这可以通过“共享读锁”和“排他写锁”实现。读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。读的是快照结果。MysQL 默认级别，通过MVCC解决了幻读问题。在事务中对某条记录修改，会对记录加上行共享锁，直到事务结束才会释放。</p>
</li>
<li><p><strong>Serializable</strong></p>
<p>序列化，提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。</p>
<p>进行查询时就会对表或行加上共享锁，其他事务对该表将只能进行读操作，而不能进行写操作。</p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/20200710/2203eTpuhO46.png" alt="2203eTpuhO46"></p>
</li>
</ol>
<p>事务隔离级别越高，数据的完整性和一致性越好，但会影响并发性能。mysql默认使用 Repeatable Read 级别，而aliyun rds 默认使用 READ COMMITTED。</p>
<p>查看查询数据库隔离级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure>

<p>Mysql 8.0 以上需要使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@transaction_isolation;</span><br></pre></td></tr></table></figure>

<p>修改事务隔离级别：mysql.ini</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可选参数有：READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span></span><br><span class="line">[mysqld]</span><br><span class="line">transaction-isolation = REPEATABLE-READ</span><br></pre></td></tr></table></figure>

<p>当然，也可以只对当前session修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set session transaction isolation level read uncommited;</span><br></pre></td></tr></table></figure>





<p><strong>锁机制</strong></p>
<p><strong>共享锁</strong>：由读表操作加上的锁，加锁后其他用户只能获取该表或行的共享锁，不能获取排它锁，也就是说只能读不能写</p>
<p><strong>排它锁</strong>：由写表操作加上的锁，加锁后其他用户不能获取该表或行的任何锁，典型是mysql事务中的</p>
<p>锁的范围:</p>
<p><strong>行锁:</strong> 对某行记录加上锁</p>
<p><strong>表锁:</strong> 对整个表加上锁</p>
<p><strong>References</strong></p>
<p>《高性能mysql》</p>
<p><a href="https://developer.aliyun.com/article/4281">https://developer.aliyun.com/article/4281</a></p>
<p>[阿里云上的rds 的隔离级别read committed 而不是repeatable-read设置原因](</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>链路监控浅析---以sleuth-zipkin和skywalking为例</title>
    <url>/2018/01/02/%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%E6%B5%85%E6%9E%90---%E4%BB%A5sleuth-zipkin%E5%92%8Cskywalking%E4%B8%BA%E4%BE%8B/</url>
    <content><![CDATA[<p><strong>APM</strong> (Application Performance Management &amp; Monitoring)四种实现思路</p>
<ol>
<li>基于日志系统，探针只负责对日志加上编号，又类似ELK的系统进行收集、处理、展示。这方面没有很成熟的产品，一般都属于公司内部封装的框架。</li>
<li>自动探针，适用语言：Java、C#、PHP、Node.js等等存在VM的语言。绝对大多数的商业产品和热门的开源产品都属于这个系列。</li>
<li>全手动探针，优势是适用范围广，最有名的就是Zipkin的整个生态系统，分布式追踪几乎无处不在。也是现在全球运用最广泛的分布式监控系统。</li>
<li>同时支持自动和手动模式的探针，适用语言同样是Java、C#、PHP、Node.js等等存在VM的语言，由于技术复杂性提高，运用的较少。优点是入门方便，同时使用灵活。商业上主要是Instana，开源主要是sky-walking提供了技术解决方案。</li>
</ol>
<span id="more"></span>

<p>三大模块:  </p>
<ol>
<li><strong>探针或sdk</strong> ：负责数据采集和发送。探针或 SDK 是应用程序的收集端。一般使用插件的模式，自动探针一般是不需要修改程序，而 SDK 则是需要修改部分配置或者代码。skywalking 就是自动探针为主，zipkin-brave 就是 Zipkin 的 Java 手动探针</li>
<li><strong>collector模块</strong> ：负责数据收集、分析、汇总、告警和存储。Collector 模块，这个根据不同的 APM 实现，可能由一个或者多个子系统构成。Collector 负责对探针和 SDK 提供网络接口（TCP、UDP、HTTP 不同形式接口）</li>
<li><strong>UI</strong> ，负责高实时性展现。包括但不限于 Trace 的查询，统计数据展现，拓扑图展现，VM 或进程相关信息等，监控关键数据的展现</li>
</ol>
<!-- more -->

<p><a href="http://www.cnblogs.com/softidea/p/7612570.html">监控概述-sleuth实现</a></p>
<h3 id="Sleuth-Zipkin"><a href="#Sleuth-Zipkin" class="headerlink" title="Sleuth-Zipkin"></a>Sleuth-Zipkin</h3><p>sleuth用来和zipkin(twitter)集成，自动完成span, trace等信息的生成，接入http request, 以及向zipkin server 发送采集信息，实现分布式服务跟踪能力。<a href="http://blog.csdn.net/qq_15138455/article/details/72956232">全链路spring cloud sleuth+zipkin</a></p>
<h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/2020052517428eW4OC17.png" alt="2020052517428eW4OC17"></p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251742fpsvkC27.png" alt="202005251742fpsvkC27"></p>
<p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251742zpz5ln39.png" alt="202005251742zpz5ln39"></p>
<h4 id="搭建zipkin-server"><a href="#搭建zipkin-server" class="headerlink" title="搭建zipkin-server"></a>搭建zipkin-server</h4><ol>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt;</span><br><span class="line">  &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加注解 <code>@EnableZipkinServer</code></p>
</li>
</ol>
<h4 id="rest服务调用"><a href="#rest服务调用" class="headerlink" title="rest服务调用"></a>rest服务调用</h4><p>建立两个基本的rest服务，不再赘述</p>
<ol>
<li><p>引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>添加配置</p>
<p><code>spring.zipkin.base-url=http://127.0.0.1:9418</code></p>
</li>
</ol>
<p><strong>启动</strong></p>
<p>LOG: aplication-name.TraceId.SpanId.BOOL</p>
<h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.sleuth.sampler.percentage</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>



<h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251743Ho6L3S06.png" alt="202005251743Ho6L3S06"></p>
<ol>
<li><p>zipkin-server引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--此依赖会自动引入spring-cloud-sleuth-stream并且引入zipkin的依赖包(可以去除zipkin-server) --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-sleuth-zipkin-stream&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--持久化数据到elasticsearch--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;zipkin-autoconfigure-storage-elasticsearch-http&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.4.2&lt;/version&gt;</span><br><span class="line">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>client引入</p>
<p><code>none</code></p>
</li>
<li><p>注解修改</p>
<p><code>@EnableZipkinStreamServer</code></p>
</li>
<li><p>问题</p>
<p>4.1. 引入es后不能显示dependency tree <a href="https://github.com/openzipkin/zipkin-dependencies">zipkin-dependencies</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O zipkin-dependencies.jar &#x27;https://search.maven.org/remote_content?g=io.zipkin.dependencies&amp;a=zipkin-dependencies&amp;v=LATEST&#x27;</span><br><span class="line">STORAGE_TYPE=elasticsearch ES_HOSTS=host1,host2 java -jar zipkin-dependencies.jar</span><br></pre></td></tr></table></figure>

</li>
<li><p>概念</p>
</li>
</ol>
<ul>
<li><strong>Span</strong> ：基本工作单元，发送一个远程调度任务 就会产生一个Span，Span是一个64位ID唯一标识的，Trace是用另一个64位ID唯一标识的，Span还有其他数据信息，比如摘要、时间戳事件、Span的ID、以及进度ID</li>
<li><strong>Trace</strong> ：一系列Span组成的一个树状结构。请求一个微服务系统的API接口，这个API接口，需要调用多个微服务，调用每个微服务都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace。</li>
<li><strong>Annotation</strong> ：用来及时记录一个事件的，一些核心注解用来定义一个请求的开始和结束 。这些注解包括以下： <ul>
<li>cs - Client Sent -客户端发送一个请求，这个注解描述了这个Span的开始</li>
<li>sr - Server Received -服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳便可得到网络传输的时间</li>
<li>ss - Server Sent （服务端发送响应）–该注解表明请求处理的完成(当请求返回客户端)，如果ss的时间戳减去sr时间戳，就可以得到服务器请求的时间。</li>
<li>cr - Client Received （客户端接收响应）-此时Span的结束，如果cr的时间戳减去cs时间戳便可以得到整个请求所消耗的时间。</li>
</ul>
</li>
<li><strong>Log</strong>: span跨度内发生的事件，异常等，包含tag, annotation, log, event等</li>
</ul>
<h3 id="sky-walking"><a href="#sky-walking" class="headerlink" title="sky-walking"></a>sky-walking</h3><p>提供分布式事务跟踪，以及APM性能监控。 <a href="https://github.com/apache/incubator-skywalking">skywalking</a>， 使用<a href="http://www.kailing.pub/article/index/arcid/178.html">javaagent</a>技术使得应用监控0耦合</p>
<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="https://docimage.oss-cn-beijing.aliyuncs.com/202005251743bkmafd38.png" alt="202005251743bkmafd38"></p>
<ol>
<li>部署<ul>
<li>下载agent, collector, ui 三个组件</li>
<li>启动collector, ui</li>
<li>修改application-name, 启动agent <code>-javaagent:/path/to/skywalking-agent/skywalking-agent.jar</code></li>
</ul>
</li>
</ol>
<p>其他的一些APM工具: <strong>Pinpoint</strong>,  <strong>CAT</strong>, <strong>Xhprof&#x2F;Xhgui</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
